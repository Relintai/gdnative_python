/* THIS FILE IS GENERATED DO NOT EDIT */
#ifndef PANDEMONIUM_GDNATIVE_API_STRUCT_H
#define PANDEMONIUM_GDNATIVE_API_STRUCT_H

#include <gdn/gdnative.h>
#include <android/pandemonium_android.h>
#include <nativescript/pandemonium_nativescript.h>
#include <net/pandemonium_net.h>
#include <pluginscript/pandemonium_pluginscript.h>
#include <videodecoder/pandemonium_videodecoder.h>

#define GDNATIVE_API_INIT(options) do {  \
	extern const pandemonium_gdnative_core_api_struct *_gdnative_wrapper_api_struct;  \
	extern const pandemonium_gdnative_ext_nativescript_api_struct *_gdnative_wrapper_nativescript_api_struct;  \
	extern const pandemonium_gdnative_ext_pluginscript_api_struct *_gdnative_wrapper_pluginscript_api_struct;  \
	extern const pandemonium_gdnative_ext_android_api_struct *_gdnative_wrapper_android_api_struct;  \
	extern const pandemonium_gdnative_ext_videodecoder_api_struct *_gdnative_wrapper_videodecoder_api_struct;  \
	extern const pandemonium_gdnative_ext_net_api_struct *_gdnative_wrapper_net_api_struct;  \
	_gdnative_wrapper_api_struct = options->api_struct;  \
	for (unsigned int i = 0; i < _gdnative_wrapper_api_struct->num_extensions; i++) {   \
		switch (_gdnative_wrapper_api_struct->extensions[i]->type) {  \
			case GDNATIVE_EXT_NATIVESCRIPT:  \
				_gdnative_wrapper_nativescript_api_struct = (pandemonium_gdnative_ext_nativescript_api_struct *) _gdnative_wrapper_api_struct->extensions[i];  \
				break;  \
			case GDNATIVE_EXT_PLUGINSCRIPT:  \
				_gdnative_wrapper_pluginscript_api_struct = (pandemonium_gdnative_ext_pluginscript_api_struct *) _gdnative_wrapper_api_struct->extensions[i];  \
				break;  \
			case GDNATIVE_EXT_ANDROID:  \
				_gdnative_wrapper_android_api_struct = (pandemonium_gdnative_ext_android_api_struct *) _gdnative_wrapper_api_struct->extensions[i];  \
				break;  \
			case GDNATIVE_EXT_VIDEODECODER:  \
				_gdnative_wrapper_videodecoder_api_struct = (pandemonium_gdnative_ext_videodecoder_api_struct *) _gdnative_wrapper_api_struct->extensions[i];  \
				break;  \
			case GDNATIVE_EXT_NET:  \
				_gdnative_wrapper_net_api_struct = (pandemonium_gdnative_ext_net_api_struct *) _gdnative_wrapper_api_struct->extensions[i];  \
				break;  \
		}  \
	}  \
 } while (0)

#ifdef __cplusplus
extern "C" {
#endif

enum GDNATIVE_API_TYPES {
	GDNATIVE_CORE,
	GDNATIVE_EXT_NATIVESCRIPT,
	GDNATIVE_EXT_PLUGINSCRIPT,
	GDNATIVE_EXT_ANDROID,
	GDNATIVE_EXT_VIDEODECODER,
	GDNATIVE_EXT_NET,
};

typedef struct pandemonium_gdnative_ext_nativescript_api_struct {
	unsigned int type;
	pandemonium_gdnative_api_version version;
	const pandemonium_gdnative_api_struct *next;
	void (*pandemonium_nativescript_register_class)(void *p_gdnative_handle, const char *p_name, const char *p_base, pandemonium_instance_create_func p_create_func, pandemonium_instance_destroy_func p_destroy_func);
	void (*pandemonium_nativescript_register_tool_class)(void *p_gdnative_handle, const char *p_name, const char *p_base, pandemonium_instance_create_func p_create_func, pandemonium_instance_destroy_func p_destroy_func);
	void (*pandemonium_nativescript_register_method)(void *p_gdnative_handle, const char *p_name, const char *p_function_name, pandemonium_method_attributes p_attr, pandemonium_instance_method p_method);
	void (*pandemonium_nativescript_register_property)(void *p_gdnative_handle, const char *p_name, const char *p_path, pandemonium_property_attributes *p_attr, pandemonium_property_set_func p_set_func, pandemonium_property_get_func p_get_func);
	void (*pandemonium_nativescript_register_signal)(void *p_gdnative_handle, const char *p_name, const pandemonium_signal *p_signal);
	void *(*pandemonium_nativescript_get_userdata)(pandemonium_object *p_instance);
	void (*pandemonium_nativescript_set_method_argument_information)(void *p_gdnative_handle, const char *p_name, const char *p_function_name, int p_num_args, const pandemonium_method_arg *p_args);
	void (*pandemonium_nativescript_set_class_documentation)(void *p_gdnative_handle, const char *p_name, pandemonium_string p_documentation);
	void (*pandemonium_nativescript_set_method_documentation)(void *p_gdnative_handle, const char *p_name, const char *p_function_name, pandemonium_string p_documentation);
	void (*pandemonium_nativescript_set_property_documentation)(void *p_gdnative_handle, const char *p_name, const char *p_path, pandemonium_string p_documentation);
	void (*pandemonium_nativescript_set_signal_documentation)(void *p_gdnative_handle, const char *p_name, const char *p_signal_name, pandemonium_string p_documentation);
	void (*pandemonium_nativescript_set_global_type_tag)(int p_idx, const char *p_name, const void *p_type_tag);
	const void *(*pandemonium_nativescript_get_global_type_tag)(int p_idx, const char *p_name);
	void (*pandemonium_nativescript_set_type_tag)(void *p_gdnative_handle, const char *p_name, const void *p_type_tag);
	const void *(*pandemonium_nativescript_get_type_tag)(const pandemonium_object *p_object);
	int (*pandemonium_nativescript_register_instance_binding_data_functions)(pandemonium_instance_binding_functions p_binding_functions);
	void (*pandemonium_nativescript_unregister_instance_binding_data_functions)(int p_idx);
	void *(*pandemonium_nativescript_get_instance_binding_data)(int p_idx, pandemonium_object *p_object);
	void (*pandemonium_nativescript_profiling_add_data)(const char *p_signature, uint64_t p_line);
} pandemonium_gdnative_ext_nativescript_api_struct;

typedef struct pandemonium_gdnative_ext_pluginscript_api_struct {
	unsigned int type;
	pandemonium_gdnative_api_version version;
	const pandemonium_gdnative_api_struct *next;
	void (*pandemonium_pluginscript_register_language)(const pandemonium_pluginscript_language_desc *language_desc);
} pandemonium_gdnative_ext_pluginscript_api_struct;

typedef struct pandemonium_gdnative_ext_android_api_struct {
	unsigned int type;
	pandemonium_gdnative_api_version version;
	const pandemonium_gdnative_api_struct *next;
	JNIEnv*(*pandemonium_android_get_env)();
	jobject (*pandemonium_android_get_activity)();
	jobject (*pandemonium_android_get_surface)();
	bool (*pandemonium_android_is_activity_resumed)();
} pandemonium_gdnative_ext_android_api_struct;

typedef struct pandemonium_gdnative_ext_videodecoder_api_struct {
	unsigned int type;
	pandemonium_gdnative_api_version version;
	const pandemonium_gdnative_api_struct *next;
	pandemonium_int (*pandemonium_videodecoder_file_read)(void *file_ptr, uint8_t *buf, int buf_size);
	int64_t (*pandemonium_videodecoder_file_seek)(void *file_ptr, int64_t pos, int whence);
	void (*pandemonium_videodecoder_register_decoder)(const pandemonium_videodecoder_interface_gdnative *p_interface);
} pandemonium_gdnative_ext_videodecoder_api_struct;

typedef struct pandemonium_gdnative_ext_net_api_struct {
	unsigned int type;
	pandemonium_gdnative_api_version version;
	const pandemonium_gdnative_api_struct *next;
	void (*pandemonium_net_bind_stream_peer)(pandemonium_object *p_obj, const pandemonium_net_stream_peer *p_interface);
	void (*pandemonium_net_bind_packet_peer)(pandemonium_object *p_obj, const pandemonium_net_packet_peer *p_interface);
	void (*pandemonium_net_bind_multiplayer_peer)(pandemonium_object *p_obj, const pandemonium_net_multiplayer_peer *p_interface);
} pandemonium_gdnative_ext_net_api_struct;

typedef struct pandemonium_gdnative_core_api_struct {
	unsigned int type;
	pandemonium_gdnative_api_version version;
	const pandemonium_gdnative_api_struct *next;
	unsigned int num_extensions;
	const pandemonium_gdnative_api_struct **extensions;
	pandemonium_real (*pandemonium_aabb_get_volume)(const pandemonium_aabb *p_self);
	pandemonium_bool (*pandemonium_aabb_has_no_volume)(const pandemonium_aabb *p_self);
	pandemonium_bool (*pandemonium_aabb_has_no_surface)(const pandemonium_aabb *p_self);
	pandemonium_vector3 (*pandemonium_aabb_get_position)(const pandemonium_aabb *p_self);
	void (*pandemonium_aabb_set_position)(const pandemonium_aabb *p_self, const pandemonium_vector3 *p_v);
	pandemonium_vector3 (*pandemonium_aabb_get_size)(const pandemonium_aabb *p_self);
	void (*pandemonium_aabb_set_size)(const pandemonium_aabb *p_self, const pandemonium_vector3 *p_v);
	pandemonium_bool (*pandemonium_aabb_operator_equal)(const pandemonium_aabb *p_self, const pandemonium_aabb *p_b);
	pandemonium_bool (*pandemonium_aabb_is_equal_approx)(const pandemonium_aabb *p_self, const pandemonium_aabb *p_aabb);
	pandemonium_bool (*pandemonium_aabb_intersects)(const pandemonium_aabb *p_self, const pandemonium_aabb *p_with);
	pandemonium_bool (*pandemonium_aabb_intersects_inclusive)(const pandemonium_aabb *p_self, const pandemonium_aabb *p_aabb);
	pandemonium_bool (*pandemonium_aabb_encloses)(const pandemonium_aabb *p_self, const pandemonium_aabb *p_with);
	pandemonium_aabb (*pandemonium_aabb_merge)(const pandemonium_aabb *p_self, const pandemonium_aabb *p_with);
	void (*pandemonium_aabb_merge_with)(pandemonium_aabb *p_self, const pandemonium_aabb *p_with);
	pandemonium_aabb (*pandemonium_aabb_intersection)(const pandemonium_aabb *p_self, const pandemonium_aabb *p_with);
	pandemonium_bool (*pandemonium_aabb_intersects_segment)(const pandemonium_aabb *p_self, const pandemonium_vector3 *p_from, const pandemonium_vector3 *p_to);
	pandemonium_bool (*pandemonium_aabb_intersects_segment_clip)(const pandemonium_aabb *p_self, const pandemonium_vector3 *p_from, const pandemonium_vector3 *p_to, const pandemonium_vector3 *r_clip);
	pandemonium_bool (*pandemonium_aabb_intersects_segment_clip_normal)(const pandemonium_aabb *p_self, const pandemonium_vector3 *p_from, const pandemonium_vector3 *p_to, const pandemonium_vector3 *r_clip, const pandemonium_vector3 *r_normal);
	pandemonium_bool (*pandemonium_aabb_intersects_ray)(const pandemonium_aabb *p_self, const pandemonium_aabb *p_from, const pandemonium_aabb *p_dir);
	pandemonium_bool (*pandemonium_aabb_intersects_ray_clip)(const pandemonium_aabb *p_self, const pandemonium_aabb *p_from, const pandemonium_aabb *p_dir, pandemonium_aabb *r_clip);
	pandemonium_bool (*pandemonium_aabb_intersects_ray_clip_normal)(const pandemonium_aabb *p_self, const pandemonium_aabb *p_from, const pandemonium_aabb *p_dir, pandemonium_aabb *r_clip, pandemonium_aabb *r_normal);
	pandemonium_bool (*pandemonium_aabb_intersects_smits_intersect_ray)(const pandemonium_aabb *p_self, const pandemonium_vector3 *p_from, const pandemonium_vector3 *p_dir, const pandemonium_real t0, const pandemonium_real t1);
	pandemonium_bool (*pandemonium_aabb_intersects_plane)(const pandemonium_aabb *p_self, const pandemonium_plane *p_plane);
	pandemonium_bool (*pandemonium_aabb_has_point)(const pandemonium_aabb *p_self, const pandemonium_vector3 *p_point);
	pandemonium_vector3 (*pandemonium_aabb_get_support)(const pandemonium_aabb *p_self, const pandemonium_vector3 *p_dir);
	pandemonium_vector3 (*pandemonium_aabb_get_longest_axis)(const pandemonium_aabb *p_self);
	pandemonium_int (*pandemonium_aabb_get_longest_axis_index)(const pandemonium_aabb *p_self);
	pandemonium_real (*pandemonium_aabb_get_longest_axis_size)(const pandemonium_aabb *p_self);
	pandemonium_vector3 (*pandemonium_aabb_get_shortest_axis)(const pandemonium_aabb *p_self);
	pandemonium_int (*pandemonium_aabb_get_shortest_axis_index)(const pandemonium_aabb *p_self);
	pandemonium_real (*pandemonium_aabb_get_shortest_axis_size)(const pandemonium_aabb *p_self);
	pandemonium_aabb (*pandemonium_aabb_grow)(const pandemonium_aabb *p_self, const pandemonium_real p_by);
	void (*pandemonium_aabb_grow_by)(pandemonium_aabb *p_self, const pandemonium_real p_amount);
	void (*pandemonium_aabb_get_edge)(const pandemonium_aabb *p_self, const pandemonium_int p_edge, pandemonium_vector3 *r_from, pandemonium_vector3 *r_to);
	pandemonium_vector3 (*pandemonium_aabb_get_endpoint)(const pandemonium_aabb *p_self, const pandemonium_int p_idx);
	pandemonium_aabb (*pandemonium_aabb_expand)(const pandemonium_aabb *p_self, const pandemonium_vector3 *p_to_point);
	void (*pandemonium_aabb_project_range_in_plane)(const pandemonium_aabb *p_self, const pandemonium_plane *p_plane, pandemonium_real *r_min, pandemonium_real *r_max);
	void (*pandemonium_aabb_expand_to)(pandemonium_aabb *p_self, const pandemonium_vector3 *p_vector);
	pandemonium_aabb (*pandemonium_aabb_abs)(const pandemonium_aabb *p_self);
	pandemonium_variant (*pandemonium_aabb_intersects_segmentv)(const pandemonium_aabb *p_self, const pandemonium_vector3 *p_from, const pandemonium_vector3 *p_to);
	pandemonium_variant (*pandemonium_aabb_intersects_rayv)(const pandemonium_aabb *p_self, const pandemonium_vector3 *p_from, const pandemonium_vector3 *p_dir);
	void (*pandemonium_aabb_quantize)(pandemonium_aabb *p_self, const pandemonium_real p_unit);
	pandemonium_aabb (*pandemonium_aabb_quantized)(const pandemonium_aabb *p_self, const pandemonium_real p_unit);
	void (*pandemonium_aabb_set_end)(pandemonium_aabb *p_self, const pandemonium_vector3 *p_end);
	pandemonium_vector3 (*pandemonium_aabb_get_end)(const pandemonium_aabb *p_self);
	pandemonium_vector3 (*pandemonium_aabb_get_center)(const pandemonium_aabb *p_self);
	pandemonium_string (*pandemonium_aabb_as_string)(const pandemonium_aabb *p_self);
	void (*pandemonium_aabb_new)(pandemonium_aabb *r_dest, const pandemonium_vector3 *p_pos, const pandemonium_vector3 *p_size);
	pandemonium_variant *(*pandemonium_array_operator_index)(pandemonium_array *p_self, const pandemonium_int p_idx);
	const pandemonium_variant *(*pandemonium_array_operator_index_const)(const pandemonium_array *p_self, const pandemonium_int p_idx);
	void (*pandemonium_array_set)(pandemonium_array *p_self, const pandemonium_int p_idx, const pandemonium_variant *p_value);
	pandemonium_variant (*pandemonium_array_get)(const pandemonium_array *p_self, const pandemonium_int p_idx);
	pandemonium_int (*pandemonium_array_size)(const pandemonium_array *p_self);
	pandemonium_bool (*pandemonium_array_empty)(const pandemonium_array *p_self);
	void (*pandemonium_array_clear)(pandemonium_array *p_self);
	pandemonium_bool (*pandemonium_array_deep_equal)(const pandemonium_array *p_self, const pandemonium_array *p_array);
	pandemonium_bool (*pandemonium_array_deep_equal_recursion_count)(const pandemonium_array *p_self, const pandemonium_array *p_array, pandemonium_int p_recursion_count);
	pandemonium_bool (*pandemonium_array_operator_equals)(pandemonium_array *p_self, const pandemonium_array *p_array);
	pandemonium_int (*pandemonium_array_hash)(const pandemonium_array *p_self);
	void (*pandemonium_array_push_back)(pandemonium_array *p_self, const pandemonium_variant *p_value);
	void (*pandemonium_array_append)(pandemonium_array *p_self, const pandemonium_variant *p_value);
	void (*pandemonium_array_append_array)(pandemonium_array *p_self, const pandemonium_array *p_array);
	void (*pandemonium_array_resize)(pandemonium_array *p_self, const pandemonium_int p_size);
	void (*pandemonium_array_insert)(pandemonium_array *p_self, const pandemonium_int p_pos, const pandemonium_variant *p_value);
	void (*pandemonium_array_remove)(pandemonium_array *p_self, const pandemonium_int p_idx);
	void (*pandemonium_array_fill)(pandemonium_array *p_self, const pandemonium_variant *p_value);
	pandemonium_variant (*pandemonium_array_front)(const pandemonium_array *p_self);
	pandemonium_variant (*pandemonium_array_back)(const pandemonium_array *p_self);
	void (*pandemonium_array_sort)(pandemonium_array *p_self);
	void (*pandemonium_array_sort_custom)(pandemonium_array *p_self, pandemonium_object *p_obj, const pandemonium_string *p_func);
	void (*pandemonium_array_shuffle)(pandemonium_array *p_self);
	pandemonium_int (*pandemonium_array_bsearch)(pandemonium_array *p_self, const pandemonium_variant *p_value, const pandemonium_bool p_before);
	pandemonium_int (*pandemonium_array_bsearch_custom)(pandemonium_array *p_self, const pandemonium_variant *p_value, pandemonium_object *p_obj, const pandemonium_string *p_func, const pandemonium_bool p_before);
	void (*pandemonium_array_invert)(pandemonium_array *p_self);
	pandemonium_int (*pandemonium_array_find)(const pandemonium_array *p_self, const pandemonium_variant *p_what);
	pandemonium_int (*pandemonium_array_find_from)(const pandemonium_array *p_self, const pandemonium_variant *p_what, const pandemonium_int p_from);
	pandemonium_int (*pandemonium_array_rfind)(const pandemonium_array *p_self, const pandemonium_variant *p_what);
	pandemonium_int (*pandemonium_array_rfind_from)(const pandemonium_array *p_self, const pandemonium_variant *p_what, const pandemonium_int p_from);
	pandemonium_int (*pandemonium_array_find_last)(const pandemonium_array *p_self, const pandemonium_variant *p_what);
	pandemonium_int (*pandemonium_array_count)(const pandemonium_array *p_self, const pandemonium_variant *p_value);
	pandemonium_bool (*pandemonium_array_has)(const pandemonium_array *p_self, const pandemonium_variant *p_value);
	void (*pandemonium_array_erase)(pandemonium_array *p_self, const pandemonium_variant *p_value);
	void (*pandemonium_array_push_front)(pandemonium_array *p_self, const pandemonium_variant *p_value);
	pandemonium_variant (*pandemonium_array_pop_back)(pandemonium_array *p_self);
	pandemonium_variant (*pandemonium_array_pop_front)(pandemonium_array *p_self);
	pandemonium_variant (*pandemonium_array_pop_at)(pandemonium_array *p_self, pandemonium_int p_pos);
	pandemonium_array (*pandemonium_array_duplicate)(const pandemonium_array *p_self);
	pandemonium_array (*pandemonium_array_duplicate_deep)(const pandemonium_array *p_self, const pandemonium_bool p_deep);
	pandemonium_array (*pandemonium_array_slice)(const pandemonium_array *p_self, const pandemonium_int p_begin, const pandemonium_int p_end);
	pandemonium_array (*pandemonium_array_slice_step)(const pandemonium_array *p_self, const pandemonium_int p_begin, const pandemonium_int p_end, const pandemonium_int p_step);
	pandemonium_array (*pandemonium_array_slice_step_deep)(const pandemonium_array *p_self, const pandemonium_int p_begin, const pandemonium_int p_end, const pandemonium_int p_step, const pandemonium_bool p_deep);
	pandemonium_variant (*pandemonium_array_min)(const pandemonium_array *p_self);
	pandemonium_variant (*pandemonium_array_max)(const pandemonium_array *p_self);
	void (*pandemonium_array_new)(pandemonium_array *r_dest);
	void (*pandemonium_array_new_copy)(pandemonium_array *r_dest, const pandemonium_array *p_src);
	void (*pandemonium_array_new_pool_byte_array)(pandemonium_array *r_dest, const pandemonium_pool_byte_array *p_pba);
	void (*pandemonium_array_new_pool_int_array)(pandemonium_array *r_dest, const pandemonium_pool_int_array *p_pia);
	void (*pandemonium_array_new_pool_real_array)(pandemonium_array *r_dest, const pandemonium_pool_real_array *p_pra);
	void (*pandemonium_array_new_pool_string_array)(pandemonium_array *r_dest, const pandemonium_pool_string_array *p_psa);
	void (*pandemonium_array_new_pool_vector2_array)(pandemonium_array *r_dest, const pandemonium_pool_vector2_array *p_pv2a);
	void (*pandemonium_array_new_pool_vector2i_array)(pandemonium_array *r_dest, const pandemonium_pool_vector2i_array *p_pv2a);
	void (*pandemonium_array_new_pool_vector3_array)(pandemonium_array *r_dest, const pandemonium_pool_vector3_array *p_pv3a);
	void (*pandemonium_array_new_pool_vector3i_array)(pandemonium_array *r_dest, const pandemonium_pool_vector3i_array *p_pv3a);
	void (*pandemonium_array_new_pool_vector4_array)(pandemonium_array *r_dest, const pandemonium_pool_vector4_array *p_pv3a);
	void (*pandemonium_array_new_pool_vector4i_array)(pandemonium_array *r_dest, const pandemonium_pool_vector4i_array *p_pv3a);
	void (*pandemonium_array_new_pool_color_array)(pandemonium_array *r_dest, const pandemonium_pool_color_array *p_pca);
	void (*pandemonium_array_destroy)(pandemonium_array *p_self);
	void (*pandemonium_basis_invert)(pandemonium_basis *p_self);
	void (*pandemonium_basis_transpose)(pandemonium_basis *p_self);
	pandemonium_basis (*pandemonium_basis_inverse)(const pandemonium_basis *p_self);
	pandemonium_basis (*pandemonium_basis_transposed)(const pandemonium_basis *p_self);
	pandemonium_real (*pandemonium_basis_determinant)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_from_z)(pandemonium_basis *p_self, const pandemonium_vector3 *p_z);
	void (*pandemonium_basis_rotate)(pandemonium_basis *p_self, const pandemonium_vector3 *p_axis, pandemonium_real p_phi);
	pandemonium_basis (*pandemonium_basis_rotated)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_axis, const pandemonium_real p_phi);
	void (*pandemonium_basis_rotate_local)(pandemonium_basis *p_self, const pandemonium_vector3 *p_axis, pandemonium_real p_phi);
	pandemonium_basis (*pandemonium_basis_rotated_local)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_axis, pandemonium_real p_phi);
	void (*pandemonium_basis_rotate_euler)(pandemonium_basis *p_self, const pandemonium_vector3 *p_euler);
	pandemonium_basis (*pandemonium_basis_rotated_euler)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_euler);
	void (*pandemonium_basis_rotate_quat)(pandemonium_basis *p_self, const pandemonium_quaternion *p_quat);
	pandemonium_basis (*pandemonium_basis_rotated_quat)(const pandemonium_basis *p_self, const pandemonium_quaternion *p_quat);
	void (*pandemonium_basis_rotatev)(pandemonium_basis *p_self, const pandemonium_vector3 *p_euler);
	pandemonium_basis (*pandemonium_basis_rotatedv)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_euler);
	void (*pandemonium_basis_rotateq)(pandemonium_basis *p_self, const pandemonium_quaternion *p_quat);
	pandemonium_basis (*pandemonium_basis_rotatedq)(const pandemonium_basis *p_self, const pandemonium_quaternion *p_quat);
	pandemonium_vector3 (*pandemonium_basis_get_rotation_euler)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_get_rotation_axis_angle)(const pandemonium_basis *p_self, pandemonium_vector3 *p_axis, pandemonium_real p_angle);
	void (*pandemonium_basis_get_rotation_axis_angle_local)(const pandemonium_basis *p_self, pandemonium_vector3 *p_axis, pandemonium_real p_angle);
	pandemonium_quaternion (*pandemonium_basis_get_rotation_quaternion)(const pandemonium_basis *p_self);
	pandemonium_vector3 (*pandemonium_basis_get_rotation)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_rotate_to_align)(pandemonium_basis *p_self, const pandemonium_vector3 *p_start_direction, const pandemonium_vector3 *p_end_direction);
	pandemonium_vector3 (*pandemonium_basis_rotref_posscale_decomposition)(const pandemonium_basis *p_self, pandemonium_basis *rotref);
	pandemonium_vector3 (*pandemonium_basis_get_euler_xyz)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_set_euler_xyz)(pandemonium_basis *p_self, const pandemonium_vector3 *p_euler);
	pandemonium_vector3 (*pandemonium_basis_get_euler_xzy)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_set_euler_xzy)(pandemonium_basis *p_self, const pandemonium_vector3 *p_euler);
	pandemonium_vector3 (*pandemonium_basis_get_euler_yzx)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_set_euler_yzx)(pandemonium_basis *p_self, const pandemonium_vector3 *p_euler);
	pandemonium_vector3 (*pandemonium_basis_get_euler_yxz)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_set_euler_yxz)(pandemonium_basis *p_self, const pandemonium_vector3 *p_euler);
	pandemonium_vector3 (*pandemonium_basis_get_euler_zxy)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_set_euler_zxy)(pandemonium_basis *p_self, const pandemonium_vector3 *p_euler);
	pandemonium_vector3 (*pandemonium_basis_get_euler_zyx)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_set_euler_zyx)(pandemonium_basis *p_self, const pandemonium_vector3 *p_euler);
	pandemonium_vector3 (*pandemonium_basis_get_euler)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_set_euler)(pandemonium_basis *p_self, const pandemonium_vector3 *p_euler);
	pandemonium_quaternion (*pandemonium_basis_get_quaternion)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_set_quaternion)(pandemonium_basis *p_self, const pandemonium_quaternion *p_quaternion);
	void (*pandemonium_basis_get_axis_angle)(const pandemonium_basis *p_self, pandemonium_vector3 *r_axis, pandemonium_real *r_angle);
	void (*pandemonium_basis_set_axis_angle)(pandemonium_basis *p_self, const pandemonium_vector3 *p_axis, pandemonium_real p_phi);
	void (*pandemonium_basis_scale)(pandemonium_basis *p_self, const pandemonium_vector3 *p_scale);
	pandemonium_basis (*pandemonium_basis_scaled)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_scale);
	void (*pandemonium_basis_scale_local)(pandemonium_basis *p_self, const pandemonium_vector3 *p_scale);
	pandemonium_basis (*pandemonium_basis_scaled_local)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_scale);
	void (*pandemonium_basis_scale_orthogonal)(pandemonium_basis *p_self, const pandemonium_vector3 *p_scale);
	pandemonium_basis (*pandemonium_basis_scaled_orthogonal)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_scale);
	void (*pandemonium_basis_make_scale_uniform)(pandemonium_basis *p_self);
	pandemonium_real (*pandemonium_basis_get_uniform_scale)(const pandemonium_basis *p_self);
	pandemonium_vector3 (*pandemonium_basis_get_scale)(const pandemonium_basis *p_self);
	pandemonium_vector3 (*pandemonium_basis_get_scale_abs)(const pandemonium_basis *p_self);
	pandemonium_vector3 (*pandemonium_basis_get_scale_local)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_set_axis_angle_scale)(pandemonium_basis *p_self, const pandemonium_vector3 *p_axis, pandemonium_real p_phi, const pandemonium_vector3 *p_scale);
	void (*pandemonium_basis_set_euler_scale)(pandemonium_basis *p_self, const pandemonium_vector3 *p_euler, const pandemonium_vector3 *p_scale);
	void (*pandemonium_basis_set_quaternion_scale)(pandemonium_basis *p_self, const pandemonium_quaternion *p_quaternion, const pandemonium_vector3 *p_scale);
	pandemonium_real (*pandemonium_basis_tdotx)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_with);
	pandemonium_real (*pandemonium_basis_tdoty)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_with);
	pandemonium_real (*pandemonium_basis_tdotz)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_with);
	pandemonium_bool (*pandemonium_basis_is_equal_approx)(const pandemonium_basis *p_self, const pandemonium_basis *p_basis);
	pandemonium_bool (*pandemonium_basis_is_equal_approx_ratio)(const pandemonium_basis *p_self, const pandemonium_basis *p_a, const pandemonium_basis *p_b);
	pandemonium_bool (*pandemonium_basis_is_equal_approx_ratio_eps)(const pandemonium_basis *p_self, const pandemonium_basis *p_a, const pandemonium_basis *p_b, pandemonium_real p_epsilon);
	pandemonium_bool (*pandemonium_basis_operator_equal)(const pandemonium_basis *p_self, const pandemonium_basis *p_b);
	pandemonium_vector3 (*pandemonium_basis_xform)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_v);
	pandemonium_vector3 (*pandemonium_basis_xform_inv)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_v);
	pandemonium_vector3i (*pandemonium_basis_xform_v3i)(const pandemonium_basis *p_self, const pandemonium_vector3i *p_vector);
	pandemonium_vector3i (*pandemonium_basis_xform_inv_v3i)(const pandemonium_basis *p_self, const pandemonium_vector3i *p_vector);
	pandemonium_basis (*pandemonium_basis_operator_multiply)(const pandemonium_basis *p_self, const pandemonium_basis *p_b);
	pandemonium_basis (*pandemonium_basis_operator_add)(const pandemonium_basis *p_self, const pandemonium_basis *p_b);
	pandemonium_basis (*pandemonium_basis_operator_subtract)(const pandemonium_basis *p_self, const pandemonium_basis *p_b);
	pandemonium_basis (*pandemonium_basis_operator_multiply_scalar)(const pandemonium_basis *p_self, const pandemonium_real p_b);
	pandemonium_int (*pandemonium_basis_get_orthogonal_index)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_set_orthogonal_index)(pandemonium_basis *p_self, pandemonium_int p_index);
	void (*pandemonium_basis_set_diagonal)(pandemonium_basis *p_self, const pandemonium_vector3 *p_diag);
	pandemonium_bool (*pandemonium_basis_is_orthogonal)(const pandemonium_basis *p_self);
	pandemonium_bool (*pandemonium_basis_is_diagonal)(const pandemonium_basis *p_self);
	pandemonium_bool (*pandemonium_basis_is_rotation)(const pandemonium_basis *p_self);
	pandemonium_basis (*pandemonium_basis_slerp)(const pandemonium_basis *p_self, const pandemonium_basis *p_b, const pandemonium_real p_t);
	pandemonium_basis (*pandemonium_basis_lerp)(const pandemonium_basis *p_self, const pandemonium_basis *p_to, const pandemonium_real p_weight);
	void (*pandemonium_basis_rotate_sh)(pandemonium_basis *p_self, pandemonium_real *p_values);
	pandemonium_string (*pandemonium_basis_as_string)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_set_real)(pandemonium_basis *p_self, pandemonium_real xx, pandemonium_real xy, pandemonium_real xz, pandemonium_real yx, pandemonium_real yy, pandemonium_real yz, pandemonium_real zx, pandemonium_real zy, pandemonium_real zz);
	void (*pandemonium_basis_set_vector3)(pandemonium_basis *p_self, const pandemonium_vector3 *p_x, const pandemonium_vector3 *p_y, const pandemonium_vector3 *p_z);
	pandemonium_vector3 (*pandemonium_basis_get_column)(const pandemonium_basis *p_self, pandemonium_int i);
	void (*pandemonium_basis_set_column)(pandemonium_basis *p_self, pandemonium_int p_index, const pandemonium_vector3 *p_value);
	void (*pandemonium_basis_set_columns)(pandemonium_basis *p_self, const pandemonium_vector3 *p_x, const pandemonium_vector3 *p_y, const pandemonium_vector3 *p_z);
	pandemonium_vector3 (*pandemonium_basis_get_row)(const pandemonium_basis *p_self, const pandemonium_int p_row);
	void (*pandemonium_basis_set_row)(pandemonium_basis *p_self, const pandemonium_int p_row, const pandemonium_vector3 *p_value);
	pandemonium_vector3 (*pandemonium_basis_get_axis)(const pandemonium_basis *p_self, const pandemonium_int p_axis);
	void (*pandemonium_basis_set_axis)(pandemonium_basis *p_self, const pandemonium_int p_axis, const pandemonium_vector3 *p_value);
	pandemonium_vector3 (*pandemonium_basis_get_main_diagonal)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_set_zero)(pandemonium_basis *p_self);
	pandemonium_basis (*pandemonium_basis_transpose_xform)(const pandemonium_basis *p_self, const pandemonium_basis *m);
	void (*pandemonium_basis_orthonormalize)(pandemonium_basis *p_self);
	pandemonium_basis (*pandemonium_basis_orthonormalized)(const pandemonium_basis *p_self);
	void (*pandemonium_basis_orthogonalize)(pandemonium_basis *p_self);
	pandemonium_basis (*pandemonium_basis_orthogonalized)(const pandemonium_basis *p_self);
	pandemonium_bool (*pandemonium_basis_is_symmetric)(const pandemonium_basis *p_self);
	pandemonium_basis (*pandemonium_basis_diagonalize)(pandemonium_basis *p_self);
	pandemonium_basis (*pandemonium_basis_get_normal_xform_basis)(const pandemonium_basis *p_self);
	pandemonium_vector3 (*pandemonium_basis_xform_normal_fast)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_vector);
	pandemonium_vector3 (*pandemonium_basis_xform_normal)(const pandemonium_basis *p_self, const pandemonium_vector3 *p_vector);
	pandemonium_basis (*pandemonium_basis_looking_at)(const pandemonium_vector3 *p_target, const pandemonium_vector3 *p_up, const pandemonium_bool p_use_model_front);
	void (*pandemonium_basis_set_look_at)(pandemonium_basis *p_self, const pandemonium_vector3 *p_target, const pandemonium_vector3 *p_up, const pandemonium_bool p_use_model_front);
	pandemonium_basis (*pandemonium_basis_looking_at_up)(const pandemonium_vector3 *p_target, const pandemonium_vector3 *p_up);
	pandemonium_basis (*pandemonium_basis_from_scale)(const pandemonium_vector3 *p_scale);
	void (*pandemonium_basis_get_elements)(const pandemonium_basis *p_self, pandemonium_vector3 *p_elements);
	void (*pandemonium_basis_new)(pandemonium_basis *r_dest);
	void (*pandemonium_basis_new_with_rows)(pandemonium_basis *r_dest, const pandemonium_vector3 *p_x_axis, const pandemonium_vector3 *p_y_axis, const pandemonium_vector3 *p_z_axis);
	void (*pandemonium_basis_new_with_axis_and_angle)(pandemonium_basis *r_dest, const pandemonium_vector3 *p_axis, const pandemonium_real p_phi);
	void (*pandemonium_basis_new_with_euler)(pandemonium_basis *r_dest, const pandemonium_vector3 *p_euler);
	void (*pandemonium_basis_new_with_euler_quaternion)(pandemonium_basis *r_dest, const pandemonium_quaternion *p_euler);
	void (*pandemonium_basis_new_quaternion_scale)(pandemonium_basis *r_dest, const pandemonium_quaternion *p_quat, const pandemonium_vector3 *p_scale);
	void (*pandemonium_basis_new_euler_scale)(pandemonium_basis *r_dest, const pandemonium_vector3 *p_euler, const pandemonium_vector3 *p_scale);
	void (*pandemonium_basis_new_axis_phi_scale)(pandemonium_basis *r_dest, const pandemonium_vector3 *p_axis, pandemonium_real p_phi, const pandemonium_vector3 *p_scale);
	void (*pandemonium_basis_new_floats)(pandemonium_basis *r_dest, pandemonium_real xx, pandemonium_real xy, pandemonium_real xz, pandemonium_real yx, pandemonium_real yy, pandemonium_real yz, pandemonium_real zx, pandemonium_real zy, pandemonium_real zz);
	pandemonium_real (*pandemonium_color_get_r)(const pandemonium_color *p_self);
	void (*pandemonium_color_set_r)(pandemonium_color *p_self, const pandemonium_real r);
	pandemonium_real (*pandemonium_color_get_g)(const pandemonium_color *p_self);
	void (*pandemonium_color_set_g)(pandemonium_color *p_self, const pandemonium_real g);
	pandemonium_real (*pandemonium_color_get_b)(const pandemonium_color *p_self);
	void (*pandemonium_color_set_b)(pandemonium_color *p_self, const pandemonium_real b);
	pandemonium_real (*pandemonium_color_get_a)(const pandemonium_color *p_self);
	void (*pandemonium_color_set_a)(pandemonium_color *p_self, const pandemonium_real a);
	pandemonium_bool (*pandemonium_color_operator_equal)(const pandemonium_color *p_self, const pandemonium_color *p_b);
	pandemonium_int (*pandemonium_color_to_rgba32)(const pandemonium_color *p_self);
	pandemonium_int (*pandemonium_color_to_argb32)(const pandemonium_color *p_self);
	pandemonium_int (*pandemonium_color_to_abgr32)(const pandemonium_color *p_self);
	pandemonium_int (*pandemonium_color_to_rgba64)(const pandemonium_color *p_self);
	pandemonium_int (*pandemonium_color_to_argb64)(const pandemonium_color *p_self);
	pandemonium_int (*pandemonium_color_to_abgr64)(const pandemonium_color *p_self);
	pandemonium_real (*pandemonium_color_gray)(const pandemonium_color *p_self);
	pandemonium_real (*pandemonium_color_get_h)(const pandemonium_color *p_self);
	pandemonium_real (*pandemonium_color_get_s)(const pandemonium_color *p_self);
	pandemonium_real (*pandemonium_color_get_v)(const pandemonium_color *p_self);
	void (*pandemonium_color_set_hsv)(pandemonium_color *p_self, pandemonium_real p_h, pandemonium_real p_s, pandemonium_real p_v);
	void (*pandemonium_color_set_hsv_alpha)(pandemonium_color *p_self, pandemonium_real p_h, pandemonium_real p_s, pandemonium_real p_v, pandemonium_real p_alpha);
	pandemonium_real *(*pandemonium_color_operator_index)(pandemonium_color *p_self, pandemonium_int idx);
	const pandemonium_real *(*pandemonium_color_operator_index_const)(const pandemonium_color *p_self, pandemonium_int idx);
	pandemonium_color (*pandemonium_color_operator_add)(const pandemonium_color *p_self, const pandemonium_color *p_color);
	void (*pandemonium_color_operator_add_eq)(pandemonium_color *p_self, const pandemonium_color *p_color);
	pandemonium_color (*pandemonium_color_operator_negate)(const pandemonium_color *p_self);
	pandemonium_color (*pandemonium_color_operator_sub)(const pandemonium_color *p_self, const pandemonium_color *p_color);
	void (*pandemonium_color_operator_sub_eq)(pandemonium_color *p_self, const pandemonium_color *p_color);
	pandemonium_color (*pandemonium_color_operator_mul_color)(const pandemonium_color *p_self, const pandemonium_color *p_color);
	pandemonium_color (*pandemonium_color_operator_mul_real)(const pandemonium_color *p_self, const pandemonium_real rvalue);
	void (*pandemonium_color_operator_mul_color_eq)(pandemonium_color *p_self, const pandemonium_color *p_color);
	void (*pandemonium_color_operator_mul_real_eq)(pandemonium_color *p_self, const pandemonium_real rvalue);
	pandemonium_color (*pandemonium_color_operator_div_color)(const pandemonium_color *p_self, const pandemonium_color *p_color);
	pandemonium_color (*pandemonium_color_operator_div_real)(const pandemonium_color *p_self, const pandemonium_real rvalue);
	void (*pandemonium_color_operator_div_color_eq)(pandemonium_color *p_self, const pandemonium_color *p_color);
	void (*pandemonium_color_operator_div_real_eq)(pandemonium_color *p_self, const pandemonium_real rvalue);
	pandemonium_bool (*pandemonium_color_is_equal_approx)(const pandemonium_color *p_self, const pandemonium_color *p_color);
	pandemonium_color (*pandemonium_color_clamp)(const pandemonium_color *p_self, const pandemonium_color *p_min);
	void (*pandemonium_color_invert)(pandemonium_color *p_self);
	void (*pandemonium_color_contrast)(pandemonium_color *p_self);
	pandemonium_color (*pandemonium_color_inverted)(const pandemonium_color *p_self);
	pandemonium_color (*pandemonium_color_contrasted)(const pandemonium_color *p_self);
	pandemonium_real (*pandemonium_color_get_luminance)(const pandemonium_color *p_self);
	pandemonium_color (*pandemonium_color_linear_interpolate)(const pandemonium_color *p_self, const pandemonium_color *p_b, const pandemonium_real p_t);
	pandemonium_color (*pandemonium_color_darkened)(const pandemonium_color *p_self, const pandemonium_real p_amount);
	pandemonium_color (*pandemonium_color_lightened)(const pandemonium_color *p_self, const pandemonium_real p_amount);
	pandemonium_int (*pandemonium_color_to_rgbe9995)(const pandemonium_color *p_self);
	pandemonium_color (*pandemonium_color_blend)(const pandemonium_color *p_self, const pandemonium_color *p_over);
	pandemonium_color (*pandemonium_color_to_linear)(const pandemonium_color *p_self);
	pandemonium_color (*pandemonium_color_to_srgb)(const pandemonium_color *p_self);
	pandemonium_color (*pandemonium_color_hex)(pandemonium_int p_hex);
	pandemonium_color (*pandemonium_color_hex64)(pandemonium_int p_hex);
	pandemonium_color (*pandemonium_color_html)(const pandemonium_string *p_color);
	pandemonium_bool (*pandemonium_color_html_is_valid)(const pandemonium_string *p_color);
	pandemonium_color (*pandemonium_color_named)(const pandemonium_string *p_name);
	pandemonium_string (*pandemonium_color_to_html)(const pandemonium_color *p_self, const pandemonium_bool p_with_alpha);
	pandemonium_color (*pandemonium_color_from_hsv)(const pandemonium_color *p_self, const pandemonium_real p_h, const pandemonium_real p_s, const pandemonium_real p_v, const pandemonium_real p_a);
	pandemonium_color (*pandemonium_color_from_rgbe9995)(pandemonium_int p_rgbe);
	pandemonium_bool (*pandemonium_color_operator_less)(const pandemonium_color *p_self, const pandemonium_color *p_b);
	pandemonium_string (*pandemonium_color_as_string)(const pandemonium_color *p_self);
	pandemonium_color (*pandemonium_color_color8)(pandemonium_int r, pandemonium_int g, pandemonium_int b);
	pandemonium_color (*pandemonium_color_color8_alpha)(pandemonium_int r, pandemonium_int g, pandemonium_int b, pandemonium_int a);
	void (*pandemonium_color_set_r8)(pandemonium_color *p_self, pandemonium_int r8);
	pandemonium_int (*pandemonium_color_get_r8)(const pandemonium_color *p_self);
	void (*pandemonium_color_set_g8)(pandemonium_color *p_self, pandemonium_int g8);
	pandemonium_int (*pandemonium_color_get_g8)(const pandemonium_color *p_self);
	void (*pandemonium_color_set_b8)(pandemonium_color *p_self, pandemonium_int b8);
	pandemonium_int (*pandemonium_color_get_b8)(const pandemonium_color *p_self);
	void (*pandemonium_color_set_a8)(pandemonium_color *p_self, pandemonium_int a8);
	pandemonium_int (*pandemonium_color_get_a8)(const pandemonium_color *p_self);
	void (*pandemonium_color_set_h)(pandemonium_color *p_self, pandemonium_real p_h);
	void (*pandemonium_color_set_s)(pandemonium_color *p_self, pandemonium_real p_s);
	void (*pandemonium_color_set_v)(pandemonium_color *p_self, pandemonium_real p_v);
	void (*pandemonium_color_new_rgba)(pandemonium_color *r_dest, const pandemonium_real p_r, const pandemonium_real p_g, const pandemonium_real p_b, const pandemonium_real p_a);
	void (*pandemonium_color_new_rgb)(pandemonium_color *r_dest, const pandemonium_real p_r, const pandemonium_real p_g, const pandemonium_real p_b);
	pandemonium_variant *(*pandemonium_dictionary_operator_index)(pandemonium_dictionary *p_self, const pandemonium_variant *p_key);
	const pandemonium_variant *(*pandemonium_dictionary_operator_index_const)(const pandemonium_dictionary *p_self, const pandemonium_variant *p_key);
	pandemonium_variant (*pandemonium_dictionary_get)(const pandemonium_dictionary *p_self, const pandemonium_variant *p_key);
	void (*pandemonium_dictionary_set)(pandemonium_dictionary *p_self, const pandemonium_variant *p_key, const pandemonium_variant *p_value);
	pandemonium_variant (*pandemonium_dictionary_get_with_default)(const pandemonium_dictionary *p_self, const pandemonium_variant *p_key, const pandemonium_variant *p_default);
	pandemonium_int (*pandemonium_dictionary_size)(const pandemonium_dictionary *p_self);
	pandemonium_bool (*pandemonium_dictionary_empty)(const pandemonium_dictionary *p_self);
	void (*pandemonium_dictionary_clear)(pandemonium_dictionary *p_self);
	void (*pandemonium_dictionary_merge)(pandemonium_dictionary *p_self, const pandemonium_dictionary *p_dictionary);
	void (*pandemonium_dictionary_merge_overwrite)(pandemonium_dictionary *p_self, const pandemonium_dictionary *p_dictionary, const pandemonium_bool p_overwrite);
	pandemonium_bool (*pandemonium_dictionary_has)(const pandemonium_dictionary *p_self, const pandemonium_variant *p_key);
	pandemonium_bool (*pandemonium_dictionary_has_all)(const pandemonium_dictionary *p_self, const pandemonium_array *p_keys);
	void (*pandemonium_dictionary_erase)(pandemonium_dictionary *p_self, const pandemonium_variant *p_key);
	pandemonium_bool (*pandemonium_dictionary_erase_with_return)(pandemonium_dictionary *p_self, const pandemonium_variant *p_key);
	pandemonium_bool (*pandemonium_dictionary_deep_equal)(const pandemonium_dictionary *p_self, const pandemonium_dictionary *p_dictionary);
	pandemonium_bool (*pandemonium_dictionary_deep_equal_recursion_count)(const pandemonium_dictionary *p_self, const pandemonium_dictionary *p_dictionary, pandemonium_int p_recursion_count);
	pandemonium_bool (*pandemonium_dictionary_operator_equal)(const pandemonium_dictionary *p_self, const pandemonium_dictionary *p_b);
	pandemonium_int (*pandemonium_dictionary_hash)(const pandemonium_dictionary *p_self);
	pandemonium_variant *(*pandemonium_dictionary_next)(const pandemonium_dictionary *p_self, const pandemonium_variant *p_key);
	pandemonium_array (*pandemonium_dictionary_keys)(const pandemonium_dictionary *p_self);
	pandemonium_array (*pandemonium_dictionary_values)(const pandemonium_dictionary *p_self);
	pandemonium_dictionary (*pandemonium_dictionary_duplicate)(const pandemonium_dictionary *p_self, const pandemonium_bool p_deep);
	pandemonium_string (*pandemonium_dictionary_to_json)(const pandemonium_dictionary *p_self);
	void (*pandemonium_dictionary_new)(pandemonium_dictionary *r_dest);
	void (*pandemonium_dictionary_new_copy)(pandemonium_dictionary *r_dest, const pandemonium_dictionary *p_src);
	void (*pandemonium_dictionary_destroy)(pandemonium_dictionary *p_self);
	void (*pandemonium_object_destroy)(pandemonium_object *p_o);
	pandemonium_object *(*pandemonium_global_get_singleton)(char *p_name);
	pandemonium_method_bind *(*pandemonium_method_bind_get_method)(const char *p_classname, const char *p_methodname);
	void (*pandemonium_method_bind_ptrcall)(pandemonium_method_bind *p_method_bind, pandemonium_object *p_instance, const void **p_args, void *p_ret);
	pandemonium_variant (*pandemonium_method_bind_call)(pandemonium_method_bind *p_method_bind, pandemonium_object *p_instance, const pandemonium_variant **p_args, const int p_arg_count, pandemonium_variant_call_error *p_call_error);
	pandemonium_class_constructor (*pandemonium_get_class_constructor)(const char *p_classname);
	pandemonium_dictionary (*pandemonium_get_global_constants)();
	void (*pandemonium_register_native_call_type)(const char *p_call_type, native_call_cb p_callback);
	void *(*pandemonium_alloc)(int p_bytes);
	void *(*pandemonium_realloc)(void *p_ptr, int p_bytes);
	void (*pandemonium_free)(void *p_ptr);
	void (*pandemonium_print_error)(const char *p_description, const char *p_function, const char *p_file, int p_line);
	void (*pandemonium_print_warning)(const char *p_description, const char *p_function, const char *p_file, int p_line);
	void (*pandemonium_print)(const pandemonium_string *p_message);
	bool (*pandemonium_is_instance_valid)(const pandemonium_object *p_object);
	void *(*pandemonium_get_class_tag)(const pandemonium_string_name *p_class);
	pandemonium_object *(*pandemonium_object_cast_to)(const pandemonium_object *p_object, void *p_class_tag);
	pandemonium_object *(*pandemonium_instance_from_id)(pandemonium_int p_instance_id);
	pandemonium_string_name (*pandemonium_node_path_get_sname)(const pandemonium_node_path *p_self);
	pandemonium_bool (*pandemonium_node_path_is_absolute)(const pandemonium_node_path *p_self);
	pandemonium_int (*pandemonium_node_path_get_name_count)(const pandemonium_node_path *p_self);
	pandemonium_string (*pandemonium_node_path_get_name)(const pandemonium_node_path *p_self, const pandemonium_int p_idx);
	pandemonium_int (*pandemonium_node_path_get_subname_count)(const pandemonium_node_path *p_self);
	pandemonium_string (*pandemonium_node_path_get_subname)(const pandemonium_node_path *p_self, const pandemonium_int p_idx);
	pandemonium_string (*pandemonium_node_path_get_concatenated_subnames)(const pandemonium_node_path *p_self);
	pandemonium_node_path (*pandemonium_node_path_rel_path_to)(const pandemonium_node_path *p_self, const pandemonium_node_path *p_np);
	pandemonium_node_path (*pandemonium_node_path_get_as_property_path)(const pandemonium_node_path *p_self);
	void (*pandemonium_node_path_prepend_period)(pandemonium_node_path *p_self);
	pandemonium_int (*pandemonium_node_path_hash)(const pandemonium_node_path *p_self);
	pandemonium_string (*pandemonium_node_path_as_string)(const pandemonium_node_path *p_self);
	pandemonium_bool (*pandemonium_node_path_is_empty)(const pandemonium_node_path *p_self);
	pandemonium_bool (*pandemonium_node_path_operator_equal)(const pandemonium_node_path *p_self, const pandemonium_node_path *p_b);
	void (*pandemonium_node_path_simplify)(pandemonium_node_path *p_self);
	pandemonium_node_path (*pandemonium_node_path_simplified)(const pandemonium_node_path *p_self);
	void (*pandemonium_node_path_new)(pandemonium_node_path *r_dest, const pandemonium_string *p_from);
	void (*pandemonium_node_path_new_copy)(pandemonium_node_path *r_dest, const pandemonium_node_path *p_src);
	void (*pandemonium_node_path_destroy)(pandemonium_node_path *p_self);
	pandemonium_real (*pandemonium_plane_get_d)(const pandemonium_plane *p_self);
	void (*pandemonium_plane_set_d)(pandemonium_plane *p_self, const pandemonium_real p_d);
	void (*pandemonium_plane_set_normal)(pandemonium_plane *p_self, const pandemonium_vector3 *p_normal);
	pandemonium_vector3 (*pandemonium_plane_get_normal)(const pandemonium_plane *p_self);
	void (*pandemonium_plane_normalize)(pandemonium_plane *p_self);
	pandemonium_plane (*pandemonium_plane_normalized)(const pandemonium_plane *p_self);
	pandemonium_vector3 (*pandemonium_plane_center)(const pandemonium_plane *p_self);
	pandemonium_vector3 (*pandemonium_plane_get_any_point)(const pandemonium_plane *p_self);
	pandemonium_vector3 (*pandemonium_plane_get_any_perpendicular_normal)(const pandemonium_plane *p_self);
	pandemonium_bool (*pandemonium_plane_is_point_over)(const pandemonium_plane *p_self, const pandemonium_vector3 *p_point);
	pandemonium_real (*pandemonium_plane_distance_to)(const pandemonium_plane *p_self, const pandemonium_vector3 *p_point);
	pandemonium_bool (*pandemonium_plane_has_point)(const pandemonium_plane *p_self, const pandemonium_vector3 *p_point, const pandemonium_real p_epsilon);
	pandemonium_bool (*pandemonium_plane_intersect_3)(const pandemonium_plane *p_self, pandemonium_vector3 *r_dest, const pandemonium_plane *p_b, const pandemonium_plane *p_c);
	pandemonium_bool (*pandemonium_plane_intersects_ray)(const pandemonium_plane *p_self, pandemonium_vector3 *r_dest, const pandemonium_vector3 *p_from, const pandemonium_vector3 *p_dir);
	pandemonium_bool (*pandemonium_plane_intersects_segment)(const pandemonium_plane *p_self, pandemonium_vector3 *r_dest, const pandemonium_vector3 *p_begin, const pandemonium_vector3 *p_end);
	pandemonium_vector3 (*pandemonium_plane_project)(const pandemonium_plane *p_self, const pandemonium_vector3 *p_point);
	pandemonium_plane (*pandemonium_plane_operator_neg)(const pandemonium_plane *p_self);
	pandemonium_bool (*pandemonium_plane_is_equal_approx)(const pandemonium_plane *p_self, const pandemonium_plane *p_plane);
	pandemonium_bool (*pandemonium_plane_is_equal_approx_any_side)(const pandemonium_plane *p_self, const pandemonium_plane *p_plane);
	pandemonium_bool (*pandemonium_plane_operator_equal)(const pandemonium_plane *p_self, const pandemonium_plane *p_b);
	pandemonium_string (*pandemonium_plane_as_string)(const pandemonium_plane *p_self);
	void (*pandemonium_plane_new_with_reals)(pandemonium_plane *r_dest, const pandemonium_real p_a, const pandemonium_real p_b, const pandemonium_real p_c, const pandemonium_real p_d);
	void (*pandemonium_plane_new_with_vectors)(pandemonium_plane *r_dest, const pandemonium_vector3 *p_v1, const pandemonium_vector3 *p_v2, const pandemonium_vector3 *p_v3);
	void (*pandemonium_plane_new_with_normal)(pandemonium_plane *r_dest, const pandemonium_vector3 *p_normal, const pandemonium_real p_d);
	pandemonium_vector4 *(*pandemonium_projection_operator_index)(pandemonium_projection *p_self, const pandemonium_int p_axis);
	const pandemonium_vector4 *(*pandemonium_projection_operator_index_const)(const pandemonium_projection *p_self, const pandemonium_int p_axis);
	pandemonium_real (*pandemonium_projection_determinant)(const pandemonium_projection *p_self);
	void (*pandemonium_projection_set_identity)(pandemonium_projection *p_self);
	void (*pandemonium_projection_set_zero)(pandemonium_projection *p_self);
	void (*pandemonium_projection_set_light_bias)(pandemonium_projection *p_self);
	void (*pandemonium_projection_set_depth_correction)(pandemonium_projection *p_self);
	void (*pandemonium_projection_set_depth_correction_flip)(pandemonium_projection *p_self, pandemonium_bool p_flip_y);
	void (*pandemonium_projection_set_light_atlas_rect)(pandemonium_projection *p_self, const pandemonium_rect2 *p_rect);
	void (*pandemonium_projection_set_perspective1)(pandemonium_projection *p_self, pandemonium_real p_fovy_degrees, pandemonium_real p_aspect, pandemonium_real p_z_near, pandemonium_real p_z_far);
	void (*pandemonium_projection_set_perspective1_flip_fov)(pandemonium_projection *p_self, pandemonium_real p_fovy_degrees, pandemonium_real p_aspect, pandemonium_real p_z_near, pandemonium_real p_z_far, pandemonium_bool p_flip_fov);
	void (*pandemonium_projection_set_perspective2)(pandemonium_projection *p_self, pandemonium_real p_fovy_degrees, pandemonium_real p_aspect, pandemonium_real p_z_near, pandemonium_real p_z_far, pandemonium_bool p_flip_fov, pandemonium_int p_eye, pandemonium_real p_intraocular_dist, pandemonium_real p_convergence_dist);
	void (*pandemonium_projection_set_for_hmd)(pandemonium_projection *p_self, pandemonium_int p_eye, pandemonium_real p_aspect, pandemonium_real p_intraocular_dist, pandemonium_real p_display_width, pandemonium_real p_display_to_lens, pandemonium_real p_oversample, pandemonium_real p_z_near, pandemonium_real p_z_far);
	void (*pandemonium_projection_set_orthogonal1)(pandemonium_projection *p_self, pandemonium_real p_left, pandemonium_real p_right, pandemonium_real p_bottom, pandemonium_real p_top, pandemonium_real p_znear, pandemonium_real p_zfar);
	void (*pandemonium_projection_set_orthogonal2)(pandemonium_projection *p_self, pandemonium_real p_size, pandemonium_real p_aspect, pandemonium_real p_znear, pandemonium_real p_zfar);
	void (*pandemonium_projection_set_orthogonal2_flip_fov)(pandemonium_projection *p_self, pandemonium_real p_size, pandemonium_real p_aspect, pandemonium_real p_znear, pandemonium_real p_zfar, pandemonium_bool p_flip_fov);
	void (*pandemonium_projection_set_frustum1)(pandemonium_projection *p_self, pandemonium_real p_left, pandemonium_real p_right, pandemonium_real p_bottom, pandemonium_real p_top, pandemonium_real p_near, pandemonium_real p_far);
	void (*pandemonium_projection_set_frustum2)(pandemonium_projection *p_self, pandemonium_real p_size, pandemonium_real p_aspect, pandemonium_vector2 *p_offset, pandemonium_real p_near, pandemonium_real p_far);
	void (*pandemonium_projection_set_frustum2_flip_fov)(pandemonium_projection *p_self, pandemonium_real p_size, pandemonium_real p_aspect, pandemonium_vector2 *p_offset, pandemonium_real p_near, pandemonium_real p_far, pandemonium_bool p_flip_fov);
	void (*pandemonium_projection_adjust_perspective_znear)(pandemonium_projection *p_self, pandemonium_real p_new_znear);
	pandemonium_projection (*pandemonium_projection_create_depth_correction)(pandemonium_bool p_flip_y);
	pandemonium_projection (*pandemonium_projection_create_light_atlas_rect)(const pandemonium_rect2 *p_rect);
	pandemonium_projection (*pandemonium_projection_create_perspective)(pandemonium_real p_fovy_degrees, pandemonium_real p_aspect, pandemonium_real p_z_near, pandemonium_real p_z_far, pandemonium_bool p_flip_fov);
	pandemonium_projection (*pandemonium_projection_create_perspective_hmd)(pandemonium_real p_fovy_degrees, pandemonium_real p_aspect, pandemonium_real p_z_near, pandemonium_real p_z_far, pandemonium_bool p_flip_fov, pandemonium_int p_eye, pandemonium_real p_intraocular_dist, pandemonium_real p_convergence_dist);
	pandemonium_projection (*pandemonium_projection_create_for_hmd)(pandemonium_int p_eye, pandemonium_real p_aspect, pandemonium_real p_intraocular_dist, pandemonium_real p_display_width, pandemonium_real p_display_to_lens, pandemonium_real p_oversample, pandemonium_real p_z_near, pandemonium_real p_z_far);
	pandemonium_projection (*pandemonium_projection_create_orthogonal)(pandemonium_real p_left, pandemonium_real p_right, pandemonium_real p_bottom, pandemonium_real p_top, pandemonium_real p_znear, pandemonium_real p_zfar);
	pandemonium_projection (*pandemonium_projection_create_orthogonal_aspect)(pandemonium_real p_size, pandemonium_real p_aspect, pandemonium_real p_znear, pandemonium_real p_zfar, pandemonium_bool p_flip_fov);
	pandemonium_projection (*pandemonium_projection_create_frustum)(pandemonium_real p_left, pandemonium_real p_right, pandemonium_real p_bottom, pandemonium_real p_top, pandemonium_real p_near, pandemonium_real p_far);
	pandemonium_projection (*pandemonium_projection_create_frustum_aspect)(pandemonium_real p_size, pandemonium_real p_aspect, pandemonium_vector2 *p_offset, pandemonium_real p_near, pandemonium_real p_far, pandemonium_bool p_flip_fov);
	pandemonium_projection (*pandemonium_projection_create_fit_aabb)(const pandemonium_aabb *p_aabb);
	pandemonium_projection (*pandemonium_projection_perspective_znear_adjusted)(const pandemonium_projection *p_self, pandemonium_real p_new_znear);
	pandemonium_plane (*pandemonium_projection_get_projection_plane)(const pandemonium_projection *p_self, pandemonium_projection_planes p_plane);
	pandemonium_projection (*pandemonium_projection_flipped_y)(const pandemonium_projection *p_self);
	pandemonium_projection (*pandemonium_projection_jitter_offseted)(const pandemonium_projection *p_self, const pandemonium_vector2 *p_offset);
	pandemonium_real (*pandemonium_projection_get_fovy)(pandemonium_real p_fovx, pandemonium_real p_aspect);
	pandemonium_real (*pandemonium_projection_calculate_fovy)(pandemonium_projection *p_self, pandemonium_real p_fovx, pandemonium_real p_aspect);
	pandemonium_real (*pandemonium_projection_get_z_far)(const pandemonium_projection *p_self);
	pandemonium_real (*pandemonium_projection_get_z_near)(const pandemonium_projection *p_self);
	pandemonium_real (*pandemonium_projection_get_aspect)(const pandemonium_projection *p_self);
	pandemonium_real (*pandemonium_projection_get_fov)(const pandemonium_projection *p_self);
	pandemonium_bool (*pandemonium_projection_is_orthogonal)(const pandemonium_projection *p_self);
	pandemonium_array (*pandemonium_projection_get_projection_planes_array)(const pandemonium_projection *p_self, const pandemonium_projection *p_projection);
	pandemonium_bool (*pandemonium_projection_get_endpoints)(const pandemonium_projection *p_self, const pandemonium_projection *p_projection, pandemonium_vector3 *p_8points);
	pandemonium_vector2 (*pandemonium_projection_get_viewport_half_extents)(const pandemonium_projection *p_self);
	pandemonium_vector2 (*pandemonium_projection_get_far_plane_half_extents)(const pandemonium_projection *p_self);
	void (*pandemonium_projection_invert)(pandemonium_projection *p_self);
	pandemonium_projection (*pandemonium_projection_inverse)(const pandemonium_projection *p_self);
	pandemonium_projection (*pandemonium_projection_operator_mul)(const pandemonium_projection *p_self, const pandemonium_projection *p_matrix);
	pandemonium_vector4 (*pandemonium_projection_xform_vector4)(const pandemonium_projection *p_self, const pandemonium_vector4 *p_vec4);
	pandemonium_vector4 (*pandemonium_projection_xform_inv_vector4)(const pandemonium_projection *p_self, const pandemonium_vector4 *p_vec4);
	pandemonium_vector3 (*pandemonium_projection_xform_vector3)(const pandemonium_projection *p_self, const pandemonium_vector3 *p_vector);
	pandemonium_plane (*pandemonium_projection_xform_plane)(const pandemonium_projection *p_self, const pandemonium_plane *p_plane);
	pandemonium_string (*pandemonium_projection_as_string)(const pandemonium_projection *p_self);
	void (*pandemonium_projection_scale_translate_to_fit)(pandemonium_projection *p_self, const pandemonium_aabb *p_aabb);
	void (*pandemonium_projection_add_jitter_offset)(pandemonium_projection *p_self, const pandemonium_vector2 *p_offset);
	void (*pandemonium_projection_make_scale)(pandemonium_projection *p_self, const pandemonium_vector3 *p_scale);
	pandemonium_int (*pandemonium_projection_get_pixels_per_meter)(const pandemonium_projection *p_self, pandemonium_int p_for_pixel_width);
	pandemonium_transform (*pandemonium_projection_to_transform)(const pandemonium_projection *p_self);
	void (*pandemonium_projection_flip_y)(pandemonium_projection *p_self);
	pandemonium_bool (*pandemonium_projection_operator_equal)(const pandemonium_projection *p_self, const pandemonium_projection *p_cam);
	pandemonium_real (*pandemonium_projection_get_lod_multiplier)(const pandemonium_projection *p_self);
	void (*pandemonium_projection_new_identity)(pandemonium_projection *r_dest);
	void (*pandemonium_projection_new_vector4s)(pandemonium_projection *r_dest, const pandemonium_vector4 *p_x, const pandemonium_vector4 *p_y, const pandemonium_vector4 *p_z, const pandemonium_vector4 *p_w);
	void (*pandemonium_projection_new_from_projection)(pandemonium_projection *r_dest, const pandemonium_projection *p_projection);
	pandemonium_real (*pandemonium_quaternion_get_x)(const pandemonium_quaternion *p_self);
	void (*pandemonium_quaternion_set_x)(pandemonium_quaternion *p_self, const pandemonium_real val);
	pandemonium_real (*pandemonium_quaternion_get_y)(const pandemonium_quaternion *p_self);
	void (*pandemonium_quaternion_set_y)(pandemonium_quaternion *p_self, const pandemonium_real val);
	pandemonium_real (*pandemonium_quaternion_get_z)(const pandemonium_quaternion *p_self);
	void (*pandemonium_quaternion_set_z)(pandemonium_quaternion *p_self, const pandemonium_real val);
	pandemonium_real (*pandemonium_quaternion_get_w)(const pandemonium_quaternion *p_self);
	void (*pandemonium_quaternion_set_w)(pandemonium_quaternion *p_self, const pandemonium_real val);
	pandemonium_real (*pandemonium_quaternion_length_squared)(const pandemonium_quaternion *p_self);
	pandemonium_bool (*pandemonium_quaternion_is_equal_approx)(const pandemonium_quaternion *p_self, const pandemonium_quaternion *p_quat);
	pandemonium_real (*pandemonium_quaternion_length)(const pandemonium_quaternion *p_self);
	void (*pandemonium_quaternion_normalize)(pandemonium_quaternion *p_self);
	pandemonium_quaternion (*pandemonium_quaternion_normalized)(const pandemonium_quaternion *p_self);
	pandemonium_bool (*pandemonium_quaternion_is_normalized)(const pandemonium_quaternion *p_self);
	pandemonium_quaternion (*pandemonium_quaternion_inverse)(const pandemonium_quaternion *p_self);
	pandemonium_quaternion (*pandemonium_quaternion_log)(const pandemonium_quaternion *p_self);
	pandemonium_quaternion (*pandemonium_quaternion_exp)(const pandemonium_quaternion *p_self);
	pandemonium_real (*pandemonium_quaternion_dot)(const pandemonium_quaternion *p_self, const pandemonium_quaternion *p_b);
	pandemonium_real (*pandemonium_quaternion_angle_to)(const pandemonium_quaternion *p_self, const pandemonium_quaternion *p_to);
	void (*pandemonium_quaternion_set_euler_xyz)(pandemonium_quaternion *p_self, const pandemonium_vector3 *p_euler);
	pandemonium_vector3 (*pandemonium_quaternion_get_euler_xyz)(const pandemonium_quaternion *p_self);
	void (*pandemonium_quaternion_set_euler_yxz)(pandemonium_quaternion *p_self, const pandemonium_vector3 *p_euler);
	pandemonium_vector3 (*pandemonium_quaternion_get_euler_yxz)(const pandemonium_quaternion *p_self);
	void (*pandemonium_quaternion_set_euler)(pandemonium_quaternion *p_self, const pandemonium_vector3 *p_euler);
	pandemonium_vector3 (*pandemonium_quaternion_get_euler)(const pandemonium_quaternion *p_self);
	pandemonium_quaternion (*pandemonium_quaternion_slerp)(const pandemonium_quaternion *p_self, const pandemonium_quaternion *p_b, const pandemonium_real p_t);
	pandemonium_quaternion (*pandemonium_quaternion_slerpni)(const pandemonium_quaternion *p_self, const pandemonium_quaternion *p_b, const pandemonium_real p_t);
	pandemonium_quaternion (*pandemonium_quaternion_cubic_slerp)(const pandemonium_quaternion *p_self, const pandemonium_quaternion *p_b, const pandemonium_quaternion *p_pre_a, const pandemonium_quaternion *p_post_b, const pandemonium_real p_t);
	pandemonium_quaternion (*pandemonium_quaternion_spherical_cubic_interpolate)(const pandemonium_quaternion *p_self, const pandemonium_quaternion *p_b, const pandemonium_quaternion *p_pre_a, const pandemonium_quaternion *p_post_b, const pandemonium_real p_weight);
	pandemonium_vector3 (*pandemonium_quaternion_get_axis)(const pandemonium_quaternion *p_self);
	pandemonium_real (*pandemonium_quaternion_get_angle)(const pandemonium_quaternion *p_self);
	void (*pandemonium_quaternion_set_axis_angle)(pandemonium_quaternion *p_self, const pandemonium_vector3 *p_axis, const pandemonium_real p_angle);
	void (*pandemonium_quaternion_get_axis_angle)(const pandemonium_quaternion *p_self, pandemonium_vector3 *r_axis, pandemonium_real r_angle);
	void (*pandemonium_quaternion_operator_mul_eq)(pandemonium_quaternion *p_self, const pandemonium_quaternion *p_q);
	pandemonium_vector3 (*pandemonium_quaternion_xform)(const pandemonium_quaternion *p_self, const pandemonium_vector3 *p_v);
	pandemonium_quaternion (*pandemonium_quaternion_operator_add)(const pandemonium_quaternion *p_self, const pandemonium_quaternion *p_b);
	pandemonium_quaternion (*pandemonium_quaternion_operator_subtract)(const pandemonium_quaternion *p_self, const pandemonium_quaternion *p_b);
	pandemonium_quaternion (*pandemonium_quaternion_operator_multiply)(const pandemonium_quaternion *p_self, const pandemonium_real p_b);
	pandemonium_quaternion (*pandemonium_quaternion_operator_divide)(const pandemonium_quaternion *p_self, const pandemonium_real p_b);
	pandemonium_quaternion (*pandemonium_quaternion_operator_neg)(const pandemonium_quaternion *p_self);
	pandemonium_bool (*pandemonium_quaternion_operator_equal)(const pandemonium_quaternion *p_self, const pandemonium_quaternion *p_b);
	pandemonium_string (*pandemonium_quaternion_as_string)(const pandemonium_quaternion *p_self);
	void (*pandemonium_quaternion_set)(pandemonium_quaternion *p_self, pandemonium_real p_x, pandemonium_real p_y, pandemonium_real p_z, pandemonium_real p_w);
	void (*pandemonium_quaternion_new)(pandemonium_quaternion *r_dest, const pandemonium_real p_x, const pandemonium_real p_y, const pandemonium_real p_z, const pandemonium_real p_w);
	void (*pandemonium_quaternion_new_with_axis_angle)(pandemonium_quaternion *r_dest, const pandemonium_vector3 *p_axis, const pandemonium_real p_angle);
	void (*pandemonium_quaternion_new_with_basis)(pandemonium_quaternion *r_dest, const pandemonium_basis *p_basis);
	void (*pandemonium_quaternion_new_with_euler)(pandemonium_quaternion *r_dest, const pandemonium_vector3 *p_euler);
	void (*pandemonium_quaternion_new_shortest_arc)(pandemonium_quaternion *r_dest, const pandemonium_vector3 *p_v0, const pandemonium_vector3 *p_v1);
	pandemonium_vector2 (*pandemonium_rect2_get_position)(const pandemonium_rect2 *p_self);
	void (*pandemonium_rect2_set_position)(pandemonium_rect2 *p_self, const pandemonium_vector2 *p_pos);
	pandemonium_vector2 (*pandemonium_rect2_get_size)(const pandemonium_rect2 *p_self);
	void (*pandemonium_rect2_set_size)(pandemonium_rect2 *p_self, const pandemonium_vector2 *p_size);
	pandemonium_real (*pandemonium_rect2_get_area)(const pandemonium_rect2 *p_self);
	pandemonium_vector2 (*pandemonium_rect2_get_center)(const pandemonium_rect2 *p_self);
	pandemonium_bool (*pandemonium_rect2_intersects)(const pandemonium_rect2 *p_self, const pandemonium_rect2 *p_b);
	pandemonium_real (*pandemonium_rect2_distance_to)(const pandemonium_rect2 *p_self, const pandemonium_vector2 *p_point);
	pandemonium_bool (*pandemonium_rect2_intersects_transformed)(const pandemonium_rect2 *p_self, const pandemonium_transform2d *p_xform, const pandemonium_rect2 *p_rect);
	pandemonium_bool (*pandemonium_rect2_intersects_segment)(const pandemonium_rect2 *p_self, const pandemonium_vector2 *p_from, const pandemonium_vector2 *p_to);
	pandemonium_bool (*pandemonium_rect2_intersects_segment_pos)(const pandemonium_rect2 *p_self, const pandemonium_vector2 *p_from, const pandemonium_vector2 *p_to, pandemonium_vector2 *r_pos);
	pandemonium_bool (*pandemonium_rect2_intersects_segment_pos_normal)(const pandemonium_rect2 *p_self, const pandemonium_vector2 *p_from, const pandemonium_vector2 *p_to, pandemonium_vector2 *r_pos, pandemonium_vector2 *r_normal);
	pandemonium_bool (*pandemonium_rect2_encloses)(const pandemonium_rect2 *p_self, const pandemonium_rect2 *p_b);
	pandemonium_bool (*pandemonium_rect2_has_no_area)(const pandemonium_rect2 *p_self);
	pandemonium_rect2 (*pandemonium_rect2_clip)(const pandemonium_rect2 *p_self, const pandemonium_rect2 *p_b);
	pandemonium_rect2 (*pandemonium_rect2_intersection)(const pandemonium_rect2 *p_self, const pandemonium_rect2 *p_rect);
	pandemonium_rect2 (*pandemonium_rect2_merge)(const pandemonium_rect2 *p_self, const pandemonium_rect2 *p_b);
	pandemonium_bool (*pandemonium_rect2_has_point)(const pandemonium_rect2 *p_self, const pandemonium_vector2 *p_point);
	pandemonium_bool (*pandemonium_rect2_is_equal_approx)(const pandemonium_rect2 *p_self, const pandemonium_rect2 *p_rect);
	pandemonium_bool (*pandemonium_rect2_operator_equal)(const pandemonium_rect2 *p_self, const pandemonium_rect2 *p_b);
	pandemonium_rect2 (*pandemonium_rect2_grow)(const pandemonium_rect2 *p_self, const pandemonium_real p_by);
	void (*pandemonium_rect2_grow_by)(pandemonium_rect2 *p_self, const pandemonium_real p_by);
	pandemonium_rect2 (*pandemonium_rect2_grow_margin)(const pandemonium_rect2 *p_self, const pandemonium_int p_margin, const pandemonium_real p_by);
	pandemonium_rect2 (*pandemonium_rect2_grow_side)(const pandemonium_rect2 *p_self, const pandemonium_int p_side, const pandemonium_real p_amount);
	pandemonium_rect2 (*pandemonium_rect2_grow_individual)(const pandemonium_rect2 *p_self, const pandemonium_real p_left, const pandemonium_real p_top, const pandemonium_real p_right, const pandemonium_real p_bottom);
	pandemonium_rect2 (*pandemonium_rect2_expand)(const pandemonium_rect2 *p_self, const pandemonium_vector2 *p_to);
	void (*pandemonium_rect2_expand_to)(pandemonium_rect2 *p_self, const pandemonium_vector2 *p_vector);
	pandemonium_rect2 (*pandemonium_rect2_abs)(const pandemonium_rect2 *p_self);
	pandemonium_vector2 (*pandemonium_rect2_get_support)(const pandemonium_rect2 *p_self, const pandemonium_vector2 *p_normal);
	void (*pandemonium_rect2_set_end)(pandemonium_rect2 *p_self, const pandemonium_vector2 *p_end);
	pandemonium_vector2 (*pandemonium_rect2_get_end)(const pandemonium_rect2 *p_self);
	pandemonium_string (*pandemonium_rect2_as_string)(const pandemonium_rect2 *p_self);
	void (*pandemonium_rect2_new_with_position_and_size)(pandemonium_rect2 *r_dest, const pandemonium_vector2 *p_pos, const pandemonium_vector2 *p_size);
	void (*pandemonium_rect2_new)(pandemonium_rect2 *r_dest, const pandemonium_real p_x, const pandemonium_real p_y, const pandemonium_real p_width, const pandemonium_real p_height);
	pandemonium_vector2i (*pandemonium_rect2i_get_position)(const pandemonium_rect2i *p_self);
	void (*pandemonium_rect2i_set_position)(pandemonium_rect2i *p_self, const pandemonium_vector2i *p_pos);
	pandemonium_vector2i (*pandemonium_rect2i_get_size)(const pandemonium_rect2i *p_self);
	void (*pandemonium_rect2i_set_size)(pandemonium_rect2i *p_self, const pandemonium_vector2i *p_size);
	pandemonium_real (*pandemonium_rect2i_get_area)(const pandemonium_rect2i *p_self);
	pandemonium_vector2i (*pandemonium_rect2i_get_center)(const pandemonium_rect2i *p_self);
	pandemonium_bool (*pandemonium_rect2i_intersects)(const pandemonium_rect2i *p_self, const pandemonium_rect2i *p_b);
	pandemonium_bool (*pandemonium_rect2i_encloses)(const pandemonium_rect2i *p_self, const pandemonium_rect2i *p_b);
	pandemonium_bool (*pandemonium_rect2i_has_no_area)(const pandemonium_rect2i *p_self);
	pandemonium_rect2i (*pandemonium_rect2i_clip)(const pandemonium_rect2i *p_self, const pandemonium_rect2i *p_b);
	pandemonium_rect2i (*pandemonium_rect2i_intersection)(const pandemonium_rect2i *p_self, const pandemonium_rect2i *p_rect);
	pandemonium_rect2i (*pandemonium_rect2i_merge)(const pandemonium_rect2i *p_self, const pandemonium_rect2i *p_b);
	pandemonium_bool (*pandemonium_rect2i_has_point)(const pandemonium_rect2i *p_self, const pandemonium_vector2i *p_point);
	pandemonium_bool (*pandemonium_rect2i_operator_equal)(const pandemonium_rect2i *p_self, const pandemonium_rect2i *p_b);
	pandemonium_rect2i (*pandemonium_rect2i_grow)(const pandemonium_rect2i *p_self, const pandemonium_real p_by);
	void (*pandemonium_rect2i_grow_by)(pandemonium_rect2i *p_self, const pandemonium_real p_by);
	pandemonium_rect2i (*pandemonium_rect2i_grow_margin)(const pandemonium_rect2i *p_self, const pandemonium_int p_margin, const pandemonium_real p_by);
	pandemonium_rect2i (*pandemonium_rect2i_grow_side)(const pandemonium_rect2i *p_self, const pandemonium_int p_side, const pandemonium_real p_amount);
	pandemonium_rect2i (*pandemonium_rect2i_grow_individual)(const pandemonium_rect2i *p_self, const pandemonium_real p_left, const pandemonium_real p_top, const pandemonium_real p_right, const pandemonium_real p_bottom);
	pandemonium_rect2i (*pandemonium_rect2i_expand)(const pandemonium_rect2i *p_self, const pandemonium_vector2i *p_to);
	void (*pandemonium_rect2i_expand_to)(pandemonium_rect2i *p_self, const pandemonium_vector2i *p_vector);
	pandemonium_rect2i (*pandemonium_rect2i_abs)(const pandemonium_rect2i *p_self);
	void (*pandemonium_rect2i_set_end)(pandemonium_rect2i *p_self, const pandemonium_vector2i *p_end);
	pandemonium_vector2i (*pandemonium_rect2i_get_end)(const pandemonium_rect2i *p_self);
	pandemonium_rect2 (*pandemonium_rect2i_to_rect2)(const pandemonium_rect2i *p_self);
	pandemonium_string (*pandemonium_rect2i_as_string)(const pandemonium_rect2i *p_self);
	void (*pandemonium_rect2i_new_with_position_and_size)(pandemonium_rect2i *r_dest, const pandemonium_vector2i *p_pos, const pandemonium_vector2i *p_size);
	void (*pandemonium_rect2i_new)(pandemonium_rect2i *r_dest, const pandemonium_real p_x, const pandemonium_real p_y, const pandemonium_real p_width, const pandemonium_real p_height);
	void (*pandemonium_rect2i_new_from_rect2)(pandemonium_rect2i *r_dest, const pandemonium_rect2 *p_r2);
	pandemonium_int (*pandemonium_rid_get_id)(const pandemonium_rid *p_self);
	void (*pandemonium_rid_new_with_resource)(pandemonium_rid *r_dest, const pandemonium_object *p_from);
	pandemonium_bool (*pandemonium_rid_operator_equal)(const pandemonium_rid *p_self, const pandemonium_rid *p_b);
	pandemonium_bool (*pandemonium_rid_operator_less)(const pandemonium_rid *p_self, const pandemonium_rid *p_b);
	void (*pandemonium_rid_new)(pandemonium_rid *r_dest);
	pandemonium_string (*pandemonium_string_name_get_name)(const pandemonium_string_name *p_self);
	uint32_t (*pandemonium_string_name_get_hash)(const pandemonium_string_name *p_self);
	const void *(*pandemonium_string_name_get_data_unique_pointer)(const pandemonium_string_name *p_self);
	pandemonium_bool (*pandemonium_string_name_operator_equal)(const pandemonium_string_name *p_self, const pandemonium_string_name *p_other);
	pandemonium_bool (*pandemonium_string_name_operator_less)(const pandemonium_string_name *p_self, const pandemonium_string_name *p_other);
	void (*pandemonium_string_name_new)(pandemonium_string_name *r_dest);
	void (*pandemonium_string_name_new_data_string)(pandemonium_string_name *r_dest, const pandemonium_string *p_name);
	void (*pandemonium_string_name_new_data_char)(pandemonium_string_name *r_dest, const char *p_name);
	void (*pandemonium_string_name_new_datac)(pandemonium_string_name *r_dest, const pandemonium_char_type *p_name);
	void (*pandemonium_string_name_destroy)(pandemonium_string_name *p_self);
	pandemonium_int (*pandemonium_char_16_string_size)(const pandemonium_char_16_string *p_self);
	pandemonium_error (*pandemonium_char_16_string_resize)(pandemonium_char_16_string *p_self, pandemonium_int p_size);
	char (*pandemonium_char_16_string_get)(const pandemonium_char_16_string *p_self, pandemonium_int p_index);
	void (*pandemonium_char_16_string_set)(pandemonium_char_16_string *p_self, pandemonium_int p_index, const char16_t p_elem);
	pandemonium_int (*pandemonium_char_16_string_length)(const pandemonium_char_16_string *p_cs);
	const char16_t *(*pandemonium_char_16_string_get_data)(const pandemonium_char_16_string *p_cs);
	void (*pandemonium_char_16_string_destroy)(pandemonium_char_16_string *p_cs);
	pandemonium_int (*pandemonium_char_string_size)(const pandemonium_char_string *p_self);
	pandemonium_error (*pandemonium_char_string_resize)(pandemonium_char_string *p_self, pandemonium_int p_size);
	char (*pandemonium_char_string_get)(const pandemonium_char_string *p_self, pandemonium_int p_index);
	void (*pandemonium_char_string_set)(pandemonium_char_string *p_self, pandemonium_int p_index, const char *p_elem);
	pandemonium_int (*pandemonium_char_string_length)(const pandemonium_char_string *p_cs);
	const char *(*pandemonium_char_string_get_data)(const pandemonium_char_string *p_cs);
	void (*pandemonium_char_string_destroy)(pandemonium_char_string *p_cs);
	void (*pandemonium_string_remove)(pandemonium_string *p_self, pandemonium_int p_index);
	void (*pandemonium_string_clear)(pandemonium_string *p_self);
	pandemonium_char_type (*pandemonium_string_get)(const pandemonium_string *p_self, pandemonium_int p_index);
	void (*pandemonium_string_set)(pandemonium_string *p_self, pandemonium_int p_index, const pandemonium_char_type p_elem);
	pandemonium_int (*pandemonium_string_size)(const pandemonium_string *p_self);
	pandemonium_int (*pandemonium_string_resize)(pandemonium_string *p_self, pandemonium_int p_size);
	pandemonium_int (*pandemonium_string_set_length)(pandemonium_string *p_self, pandemonium_int p_length);
	const char32_t *(*pandemonium_string_operator_index)(pandemonium_string *p_self, const pandemonium_int p_idx);
	char32_t (*pandemonium_string_operator_index_const)(const pandemonium_string *p_self, const pandemonium_int p_idx);
	pandemonium_bool (*pandemonium_string_operator_equal)(const pandemonium_string *p_self, const pandemonium_string *p_b);
	pandemonium_bool (*pandemonium_string_operator_less)(const pandemonium_string *p_self, const pandemonium_string *p_b);
	pandemonium_string (*pandemonium_string_operator_plus)(const pandemonium_string *p_self, const pandemonium_string *p_b);
	signed char (*pandemonium_string_casecmp_to)(const pandemonium_string *p_self, const pandemonium_string *p_str);
	signed char (*pandemonium_string_nocasecmp_to)(const pandemonium_string *p_self, const pandemonium_string *p_str);
	signed char (*pandemonium_string_naturalnocasecmp_to)(const pandemonium_string *p_self, const pandemonium_string *p_str);
	const char32_t *(*pandemonium_string_get_data)(const pandemonium_string *p_self);
	pandemonium_int (*pandemonium_string_length)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_is_valid_string)(const pandemonium_string *p_self);
	void (*pandemonium_string_print_unicode_error)(const pandemonium_string *p_self, const pandemonium_string *p_message, pandemonium_bool p_critical);
	pandemonium_string (*pandemonium_string_substr)(const pandemonium_string *p_self, pandemonium_int p_from, pandemonium_int p_chars);
	pandemonium_string (*pandemonium_string_substr_index)(const pandemonium_string *p_self, const pandemonium_int p_start_index, const pandemonium_int p_end_index);
	pandemonium_int (*pandemonium_string_find)(const pandemonium_string *p_self, pandemonium_string p_what);
	pandemonium_int (*pandemonium_string_find_from)(const pandemonium_string *p_self, pandemonium_string p_what, pandemonium_int p_from);
	pandemonium_int (*pandemonium_string_findc)(const pandemonium_string *p_self, const char *p_str);
	pandemonium_int (*pandemonium_string_findc_from)(const pandemonium_string *p_self, const char *p_str, pandemonium_int p_from);
	pandemonium_int (*pandemonium_string_find_char)(const pandemonium_string *p_self, const pandemonium_char_type p_char);
	pandemonium_int (*pandemonium_string_find_char_from)(const pandemonium_string *p_self, const pandemonium_char_type p_char, pandemonium_int p_from);
	pandemonium_int (*pandemonium_string_find_last)(const pandemonium_string *p_self, pandemonium_string p_what);
	pandemonium_int (*pandemonium_string_findn)(const pandemonium_string *p_self, pandemonium_string p_what);
	pandemonium_int (*pandemonium_string_findn_from)(const pandemonium_string *p_self, pandemonium_string p_what, pandemonium_int p_from);
	pandemonium_int (*pandemonium_string_rfind)(const pandemonium_string *p_self, pandemonium_string p_what);
	pandemonium_int (*pandemonium_string_rfindn)(const pandemonium_string *p_self, pandemonium_string p_what);
	pandemonium_int (*pandemonium_string_rfind_from)(const pandemonium_string *p_self, pandemonium_string p_what, pandemonium_int p_from);
	pandemonium_int (*pandemonium_string_rfindn_from)(const pandemonium_string *p_self, pandemonium_string p_what, pandemonium_int p_from);
	pandemonium_int (*pandemonium_string_findmk)(const pandemonium_string *p_self, const pandemonium_array *p_keys);
	pandemonium_int (*pandemonium_string_findmk_from)(const pandemonium_string *p_self, const pandemonium_array *p_keys, pandemonium_int p_from);
	pandemonium_int (*pandemonium_string_findmk_from_in_place)(const pandemonium_string *p_self, const pandemonium_array *p_keys, pandemonium_int p_from, pandemonium_int *r_key);
	pandemonium_int (*pandemonium_string_find_first_difference_index)(const pandemonium_string *p_self, const pandemonium_string *p_str);
	pandemonium_bool (*pandemonium_string_is_word_atc)(const pandemonium_string *p_self, const pandemonium_int p_index, const char *p_str);
	pandemonium_bool (*pandemonium_string_is_word_at)(const pandemonium_string *p_self, const pandemonium_int p_index, const pandemonium_string *p_str);
	pandemonium_bool (*pandemonium_string_match)(const pandemonium_string *p_self, const pandemonium_string *p_wildcard);
	pandemonium_bool (*pandemonium_string_matchn)(const pandemonium_string *p_self, const pandemonium_string *p_wildcard);
	pandemonium_bool (*pandemonium_string_begins_with)(const pandemonium_string *p_self, const pandemonium_string *p_string);
	pandemonium_bool (*pandemonium_string_begins_with_char_array)(const pandemonium_string *p_self, const char *p_char_array);
	pandemonium_bool (*pandemonium_string_ends_with)(const pandemonium_string *p_self, const pandemonium_string *p_string);
	pandemonium_bool (*pandemonium_string_is_enclosed_in)(const pandemonium_string *p_self, const pandemonium_string *p_string);
	pandemonium_bool (*pandemonium_string_is_subsequence_of)(const pandemonium_string *p_self, const pandemonium_string *p_string);
	pandemonium_bool (*pandemonium_string_is_subsequence_ofi)(const pandemonium_string *p_self, const pandemonium_string *p_string);
	pandemonium_bool (*pandemonium_string_is_quoted)(const pandemonium_string *p_self);
	pandemonium_array (*pandemonium_string_bigrams)(const pandemonium_string *p_self);
	pandemonium_real (*pandemonium_string_similarity)(const pandemonium_string *p_self, const pandemonium_string *p_string);
	pandemonium_string (*pandemonium_string_format)(const pandemonium_string *p_self, const pandemonium_variant *p_values);
	pandemonium_string (*pandemonium_string_format_with_custom_placeholder)(const pandemonium_string *p_self, const pandemonium_variant *p_values, const char *p_placeholder);
	pandemonium_string (*pandemonium_string_replace_first)(const pandemonium_string *p_self, pandemonium_string p_key, pandemonium_string p_with);
	pandemonium_string (*pandemonium_string_replace)(const pandemonium_string *p_self, pandemonium_string p_key, pandemonium_string p_with);
	pandemonium_string (*pandemonium_string_replacec)(const pandemonium_string *p_self, const pandemonium_char_type *p_key, const pandemonium_char_type *p_with);
	pandemonium_string (*pandemonium_string_replacen)(const pandemonium_string *p_self, pandemonium_string p_key, pandemonium_string p_with);
	pandemonium_string (*pandemonium_string_newline_to_br)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_repeat)(const pandemonium_string *p_self, pandemonium_int p_count);
	pandemonium_string (*pandemonium_string_insert)(const pandemonium_string *p_self, pandemonium_int p_at_pos, pandemonium_string p_string);
	pandemonium_string (*pandemonium_string_pad_decimals)(const pandemonium_string *p_self, pandemonium_int p_digits);
	pandemonium_string (*pandemonium_string_pad_zeros)(const pandemonium_string *p_self, pandemonium_int p_digits);
	pandemonium_string (*pandemonium_string_trim_prefix)(const pandemonium_string *p_self, const pandemonium_string *p_prefix);
	pandemonium_string (*pandemonium_string_trim_suffix)(const pandemonium_string *p_self, const pandemonium_string *p_suffix);
	pandemonium_string (*pandemonium_string_lpad)(const pandemonium_string *p_self, pandemonium_int p_min_length);
	pandemonium_string (*pandemonium_string_lpad_with_custom_character)(const pandemonium_string *p_self, pandemonium_int p_min_length, const pandemonium_string *p_character);
	pandemonium_string (*pandemonium_string_rpad)(const pandemonium_string *p_self, pandemonium_int p_min_length);
	pandemonium_string (*pandemonium_string_rpad_with_custom_character)(const pandemonium_string *p_self, pandemonium_int p_min_length, const pandemonium_string *p_character);
	pandemonium_string (*pandemonium_string_sprintf)(const pandemonium_string *p_self, const pandemonium_array *p_values, pandemonium_bool *p_error);
	pandemonium_string (*pandemonium_string_quote)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_quote_quotechar)(const pandemonium_string *p_self, pandemonium_string *p_quotechar);
	pandemonium_string (*pandemonium_string_unquote)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_num)(double p_num);
	pandemonium_string (*pandemonium_string_num_with_decimals)(double p_num, pandemonium_int p_decimals);
	pandemonium_string (*pandemonium_string_num_scientific)(double p_num);
	pandemonium_string (*pandemonium_string_num_real)(double p_num);
	pandemonium_string (*pandemonium_string_num_int64)(int64_t p_num, pandemonium_int p_base);
	pandemonium_string (*pandemonium_string_num_int64_capitalized)(int64_t p_num, pandemonium_int p_base, pandemonium_bool p_capitalize_hex);
	pandemonium_string (*pandemonium_string_num_uint64)(uint64_t p_num, pandemonium_int p_base);
	pandemonium_string (*pandemonium_string_num_uint64_capitalized)(uint64_t p_num, pandemonium_int p_base, pandemonium_bool p_capitalize_hex);
	pandemonium_string (*pandemonium_string_chr)(wchar_t p_character);
	pandemonium_string (*pandemonium_string_md5)(const uint8_t *p_md5);
	pandemonium_string (*pandemonium_string_hex_encode_buffer)(const uint8_t *p_buffer, pandemonium_int p_len);
	pandemonium_string (*pandemonium_string_bool_num)(pandemonium_bool p_val);
	pandemonium_string (*pandemonium_string_bool_str)(pandemonium_bool p_val);
	pandemonium_bool (*pandemonium_string_is_numeric)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_is_zero)(const pandemonium_string *p_self);
	double (*pandemonium_string_to_double)(const pandemonium_string *p_self);
	float (*pandemonium_string_to_float)(const pandemonium_string *p_self);
	pandemonium_real (*pandemonium_string_to_real)(const pandemonium_string *p_self);
	pandemonium_int (*pandemonium_string_to_int)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_to_bool)(const pandemonium_string *p_self);
	uint32_t (*pandemonium_string_to_uint)(const pandemonium_string *p_self);
	pandemonium_int (*pandemonium_string_hex_to_int)(const pandemonium_string *p_self);
	pandemonium_int (*pandemonium_string_hex_to_int_without_prefix)(const pandemonium_string *p_self);
	int64_t (*pandemonium_string_hex_to_int64)(const pandemonium_string *p_self);
	int64_t (*pandemonium_string_hex_to_int64_with_prefix)(const pandemonium_string *p_self);
	int64_t (*pandemonium_string_to_int64)(const pandemonium_string *p_self);
	pandemonium_int (*pandemonium_string_char_to_int)(const char *p_what);
	pandemonium_int (*pandemonium_string_char_to_int_with_len)(const char *p_what, pandemonium_int p_len);
	int64_t (*pandemonium_string_wchar_to_int)(const wchar_t *p_str);
	int64_t (*pandemonium_string_char_to_int64_with_len)(const wchar_t *p_str, int p_len);
	int64_t (*pandemonium_string_to_intc)(const pandemonium_char_type *p_str);
	int64_t (*pandemonium_string_to_intc_len)(const pandemonium_char_type *p_str, pandemonium_int p_len);
	int64_t (*pandemonium_string_to_intc_len_clamp)(const pandemonium_char_type *p_str, pandemonium_int p_len, pandemonium_bool p_clamp);
	float (*pandemonium_string_char_to_float)(const char *p_what);
	float (*pandemonium_string_wchar_to_float)(const wchar_t *p_str, const wchar_t **r_end);
	float (*pandemonium_string_pandemonium_char_to_float)(const pandemonium_char_type *p_str, const pandemonium_char_type **r_end);
	double (*pandemonium_string_char_to_double)(const char *p_what);
	double (*pandemonium_string_wchar_to_double)(const wchar_t *p_str, const wchar_t **r_end);
	double (*pandemonium_string_pandemonium_char_to_double)(const pandemonium_char_type *p_str, const pandemonium_char_type **r_end);
	uint32_t (*pandemonium_string_num_characters)(int64_t p_int);
	pandemonium_string (*pandemonium_string_capitalize)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_camelcase_to_underscore)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_camelcase_to_underscore_lowercased)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_get_with_code_lines)(const pandemonium_string *p_self);
	pandemonium_int (*pandemonium_string_get_slice_count)(const pandemonium_string *p_self, pandemonium_string p_splitter);
	pandemonium_string (*pandemonium_string_get_slice)(const pandemonium_string *p_self, pandemonium_string p_splitter, pandemonium_int p_slice);
	pandemonium_string (*pandemonium_string_get_slicec)(const pandemonium_string *p_self, wchar_t p_splitter, pandemonium_int p_slice);
	pandemonium_pool_string_array (*pandemonium_string_split)(const pandemonium_string *p_self, const pandemonium_string *p_splitter);
	pandemonium_pool_string_array (*pandemonium_string_split_allow_empty)(const pandemonium_string *p_self, const pandemonium_string *p_splitter, const pandemonium_bool p_allow_empty);
	pandemonium_pool_string_array (*pandemonium_string_split_maxsplit)(const pandemonium_string *p_self, const pandemonium_string *p_splitter, const pandemonium_bool p_allow_empty, const pandemonium_int p_maxsplit);
	pandemonium_pool_string_array (*pandemonium_string_rsplit)(const pandemonium_string *p_self, const pandemonium_string *p_splitter);
	pandemonium_pool_string_array (*pandemonium_string_rsplit_allow_empty)(const pandemonium_string *p_self, const pandemonium_string *p_splitter, const pandemonium_bool p_allow_empty);
	pandemonium_pool_string_array (*pandemonium_string_rsplit_maxsplit)(const pandemonium_string *p_self, const pandemonium_string *p_splitter, const pandemonium_bool p_allow_empty, const pandemonium_int p_maxsplit);
	pandemonium_array (*pandemonium_string_split_spaces)(const pandemonium_string *p_self);
	pandemonium_array (*pandemonium_string_split_floats)(const pandemonium_string *p_self, const pandemonium_string *p_splitter);
	pandemonium_array (*pandemonium_string_split_floats_allow_empty)(const pandemonium_string *p_self, const pandemonium_string *p_splitter, const pandemonium_bool p_allow_empty);
	pandemonium_array (*pandemonium_string_split_floats_mk)(const pandemonium_string *p_self, const pandemonium_array *p_splitters);
	pandemonium_array (*pandemonium_string_split_floats_mk_allow_empty)(const pandemonium_string *p_self, const pandemonium_array *p_splitters, const pandemonium_bool p_allow_empty);
	pandemonium_array (*pandemonium_string_split_ints)(const pandemonium_string *p_self, const pandemonium_string *p_splitter);
	pandemonium_array (*pandemonium_string_split_ints_allow_empty)(const pandemonium_string *p_self, const pandemonium_string *p_splitter, const pandemonium_bool p_allow_empty);
	pandemonium_array (*pandemonium_string_split_ints_mk)(const pandemonium_string *p_self, const pandemonium_array *p_splitters);
	pandemonium_array (*pandemonium_string_split_ints_mk_allow_empty)(const pandemonium_string *p_self, const pandemonium_array *p_splitters, const pandemonium_bool p_allow_empty);
	pandemonium_string (*pandemonium_string_join)(const pandemonium_string *p_self, const pandemonium_array *p_parts);
	pandemonium_char_type (*pandemonium_string_char_uppercase)(pandemonium_char_type p_char);
	pandemonium_char_type (*pandemonium_string_char_lowercase)(pandemonium_char_type p_char);
	pandemonium_string (*pandemonium_string_to_upper)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_to_lower)(const pandemonium_string *p_self);
	pandemonium_int (*pandemonium_string_count)(const pandemonium_string *p_self, pandemonium_string p_what, pandemonium_int p_from, pandemonium_int p_to);
	pandemonium_int (*pandemonium_string_countn)(const pandemonium_string *p_self, pandemonium_string p_what, pandemonium_int p_from, pandemonium_int p_to);
	pandemonium_string (*pandemonium_string_left)(const pandemonium_string *p_self, pandemonium_int p_pos);
	pandemonium_string (*pandemonium_string_right)(const pandemonium_string *p_self, pandemonium_int p_pos);
	pandemonium_string (*pandemonium_string_indent)(const pandemonium_string *p_self, const pandemonium_string *p_prefix);
	pandemonium_string (*pandemonium_string_dedent)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_strip_edges)(const pandemonium_string *p_self, pandemonium_bool p_left, pandemonium_bool p_right);
	pandemonium_string (*pandemonium_string_strip_escapes)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_lstrip)(const pandemonium_string *p_self, const pandemonium_string *p_chars);
	pandemonium_string (*pandemonium_string_rstrip)(const pandemonium_string *p_self, const pandemonium_string *p_chars);
	pandemonium_string (*pandemonium_string_get_extension)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_get_basename)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_plus_file)(const pandemonium_string *p_self, const pandemonium_string *p_file);
	pandemonium_char_type (*pandemonium_string_unicode_at)(const pandemonium_string *p_self, pandemonium_int p_idx);
	pandemonium_char_type (*pandemonium_string_ord_at)(const pandemonium_string *p_self, pandemonium_int p_idx);
	void (*pandemonium_string_erase)(pandemonium_string *p_self, pandemonium_int p_pos, pandemonium_int p_chars);
	pandemonium_char_string (*pandemonium_string_ascii)(const pandemonium_string *p_self);
	pandemonium_char_string (*pandemonium_string_ascii_extended)(const pandemonium_string *p_self);
	pandemonium_char_string (*pandemonium_string_utf8)(const pandemonium_string *p_self);
	pandemonium_error (*pandemonium_string_parse_utf8)(pandemonium_string *p_self, const char *p_utf8);
	pandemonium_error (*pandemonium_string_parse_utf8_with_len)(pandemonium_string *p_self, const char *p_utf8, pandemonium_int p_len);
	pandemonium_error (*pandemonium_string_parse_utf8_with_len_skip_cr)(pandemonium_string *p_self, const char *p_utf8, pandemonium_int p_len, pandemonium_bool p_skip_cr);
	pandemonium_string (*pandemonium_string_chars_to_utf8)(const char *p_utf8);
	pandemonium_string (*pandemonium_string_chars_to_utf8_with_len)(const char *p_utf8, pandemonium_int p_len);
	pandemonium_int (*pandemonium_string_utf8_byte_length)(const pandemonium_string *p_self);
	pandemonium_char_16_string (*pandemonium_string_utf16)(const pandemonium_string *p_self);
	pandemonium_error (*pandemonium_string_parse_utf16)(pandemonium_string *p_self, const char16_t *p_utf8);
	pandemonium_error (*pandemonium_string_parse_utf16_with_len)(pandemonium_string *p_self, const char16_t *p_utf8, pandemonium_int p_len);
	pandemonium_string (*pandemonium_string_chars_to_utf16)(const char16_t *p_utf8);
	pandemonium_string (*pandemonium_string_chars_to_utf16_with_len)(const char16_t *p_utf8, pandemonium_int p_len);
	pandemonium_int (*pandemonium_string_utf16_byte_length)(const pandemonium_string *p_self);
	uint32_t (*pandemonium_string_hash_chars)(const char *p_cstr);
	uint32_t (*pandemonium_string_hash_chars_with_len)(const char *p_cstr, pandemonium_int p_len);
	uint32_t (*pandemonium_string_hash_wchar)(const wchar_t *p_str);
	uint32_t (*pandemonium_string_hash_wchar_with_len)(const wchar_t *p_str, pandemonium_int p_len);
	uint32_t (*pandemonium_string_hashc)(const pandemonium_char_type *p_cstr);
	uint32_t (*pandemonium_string_hashc_with_len)(const pandemonium_char_type *p_cstr, pandemonium_int p_len);
	uint32_t (*pandemonium_string_hash)(const pandemonium_string *p_self);
	uint64_t (*pandemonium_string_hash64)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_md5_text)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_sha1_text)(const pandemonium_string *p_self);
	pandemonium_pool_byte_array (*pandemonium_string_sha256_buffer)(const pandemonium_string *p_self);
	pandemonium_pool_byte_array (*pandemonium_string_md5_buffer)(const pandemonium_string *p_self);
	pandemonium_pool_byte_array (*pandemonium_string_sha1_buffer)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_sha256_text)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_empty)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_containsc)(const pandemonium_string *p_self, const char *p_str);
	pandemonium_bool (*pandemonium_string_contains)(const pandemonium_string *p_self, const pandemonium_string *p_str);
	pandemonium_bool (*pandemonium_string_is_abs_path)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_is_rel_path)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_is_resource_file)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_path_to)(const pandemonium_string *p_self, const pandemonium_string *p_path);
	pandemonium_string (*pandemonium_string_path_to_file)(const pandemonium_string *p_self, const pandemonium_string *p_path);
	pandemonium_string (*pandemonium_string_get_base_dir)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_get_file)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_humanize_size)(uint64_t p_size);
	pandemonium_string (*pandemonium_string_simplify_path)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_is_network_share_path)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_append_pathc)(const pandemonium_string *p_self, const char *p_path);
	pandemonium_string (*pandemonium_string_append_path)(const pandemonium_string *p_self, const pandemonium_string *p_path);
	pandemonium_string (*pandemonium_string_path_clean_end_slash)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_path_ensure_end_slash)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_path_get_prev_dir)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_xml_escape)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_xml_escape_with_quotes)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_xml_unescape)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_http_escape)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_http_unescape)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_uri_encode)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_uri_decode)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_c_escape)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_c_escape_multiline)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_c_unescape)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_json_escape)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_word_wrap)(const pandemonium_string *p_self, pandemonium_int p_chars_per_line);
	pandemonium_error (*pandemonium_string_parse_url)(const pandemonium_string *p_self, pandemonium_string *r_scheme, pandemonium_string *r_host, pandemonium_int *r_port, pandemonium_string *r_path);
	pandemonium_string (*pandemonium_string_percent_decode)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_percent_encode)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_property_name_encode)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_get_invalid_node_name_characters)();
	pandemonium_string (*pandemonium_string_validate_node_name)(const pandemonium_string *p_self);
	pandemonium_string (*pandemonium_string_validate_identifier)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_is_valid_identifier)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_is_valid_integer)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_is_valid_float)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_is_valid_hex_number)(const pandemonium_string *p_self, pandemonium_bool p_with_prefix);
	pandemonium_bool (*pandemonium_string_is_valid_html_color)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_is_valid_ip_address)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_is_valid_filename)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_is_valid_bool)(const pandemonium_string *p_self);
	pandemonium_bool (*pandemonium_string_is_valid_unsigned_integer)(const pandemonium_string *p_self);
	pandemonium_pool_byte_array (*pandemonium_string_to_ascii_buffer)(const pandemonium_string *p_self);
	pandemonium_pool_byte_array (*pandemonium_string_to_utf8_buffer)(const pandemonium_string *p_self);
	pandemonium_pool_byte_array (*pandemonium_string_to_utf16_buffer)(const pandemonium_string *p_self);
	pandemonium_pool_byte_array (*pandemonium_string_to_utf32_buffer)(const pandemonium_string *p_self);
	void (*pandemonium_string_new)(pandemonium_string *r_dest);
	void (*pandemonium_string_new_copy)(pandemonium_string *r_dest, const pandemonium_string *p_src);
	void (*pandemonium_string_new_char)(pandemonium_string *r_dest, const char *p_contents);
	void (*pandemonium_string_new_char_clip_to_len)(pandemonium_string *r_dest, const char *p_contents, const int p_size);
	void (*pandemonium_string_new_wchar)(pandemonium_string *r_dest, const wchar_t *p_contents);
	void (*pandemonium_string_new_wchar_clip_to_len)(pandemonium_string *r_dest, const wchar_t *p_contents, const int p_size);
	void (*pandemonium_string_newc)(pandemonium_string *r_dest, const pandemonium_char_type *p_contents);
	void (*pandemonium_string_newc_clip_to_len)(pandemonium_string *r_dest, const pandemonium_char_type *p_contents, const int p_size);
	void (*pandemonium_string_destroy)(pandemonium_string *p_self);
	void (*pandemonium_transform_invert)(pandemonium_transform *p_self);
	pandemonium_transform (*pandemonium_transform_inverse)(const pandemonium_transform *p_self);
	void (*pandemonium_transform_affine_invert)(pandemonium_transform *p_self);
	pandemonium_transform (*pandemonium_transform_affine_inverse)(const pandemonium_transform *p_self);
	pandemonium_transform (*pandemonium_transform_rotated)(const pandemonium_transform *p_self, const pandemonium_vector3 *p_axis, const pandemonium_real p_phi);
	pandemonium_transform (*pandemonium_transform_rotated_local)(const pandemonium_transform *p_self, const pandemonium_vector3 *p_axis, pandemonium_real p_phi);
	void (*pandemonium_transform_rotate)(pandemonium_transform *p_self, const pandemonium_vector3 *p_axis, pandemonium_real p_phi);
	void (*pandemonium_transform_rotate_local)(pandemonium_transform *p_self, const pandemonium_vector3 *p_axis, pandemonium_real p_phi);
	void (*pandemonium_transform_rotate_basis)(pandemonium_transform *p_self, const pandemonium_vector3 *p_axis, pandemonium_real p_phi);
	void (*pandemonium_transform_set_look_at)(pandemonium_transform *p_self, const pandemonium_vector3 *p_eye, const pandemonium_vector3 *p_target, const pandemonium_vector3 *p_up, const pandemonium_bool p_use_model_front);
	pandemonium_transform (*pandemonium_transform_looking_at)(const pandemonium_transform *p_self, const pandemonium_vector3 *p_target, const pandemonium_vector3 *p_up, const pandemonium_bool p_use_model_front);
	void (*pandemonium_transform_scale)(pandemonium_transform *p_self, const pandemonium_vector3 *p_scale);
	pandemonium_transform (*pandemonium_transform_scaled)(const pandemonium_transform *p_self, const pandemonium_vector3 *p_scale);
	pandemonium_transform (*pandemonium_transform_scaled_local)(const pandemonium_transform *p_self, const pandemonium_vector3 *p_scale);
	void (*pandemonium_transform_scale_basis)(pandemonium_transform *p_self, const pandemonium_vector3 *p_scale);
	void (*pandemonium_transform_translate_localr)(pandemonium_transform *p_self, pandemonium_real p_tx, pandemonium_real p_ty, pandemonium_real p_tz);
	void (*pandemonium_transform_translate_localv)(pandemonium_transform *p_self, const pandemonium_vector3 *p_translation);
	pandemonium_transform (*pandemonium_transform_translated)(const pandemonium_transform *p_self, const pandemonium_vector3 *p_ofs);
	pandemonium_transform (*pandemonium_transform_translated_local)(const pandemonium_transform *p_self, const pandemonium_vector3 *p_translation);
	pandemonium_basis (*pandemonium_transform_get_basis)(const pandemonium_transform *p_self);
	void (*pandemonium_transform_set_basis)(pandemonium_transform *p_self, const pandemonium_basis *p_v);
	pandemonium_vector3 (*pandemonium_transform_get_origin)(const pandemonium_transform *p_self);
	void (*pandemonium_transform_set_origin)(pandemonium_transform *p_self, const pandemonium_vector3 *p_v);
	void (*pandemonium_transform_orthonormalize)(pandemonium_transform *p_self);
	pandemonium_transform (*pandemonium_transform_orthonormalized)(const pandemonium_transform *p_self);
	void (*pandemonium_transform_orthogonalize)(pandemonium_transform *p_self);
	pandemonium_transform (*pandemonium_transform_orthogonalized)(const pandemonium_transform *p_self);
	pandemonium_bool (*pandemonium_transform_is_equal_approx)(const pandemonium_transform *p_self, const pandemonium_transform *p_transform);
	pandemonium_bool (*pandemonium_transform_operator_equal)(const pandemonium_transform *p_self, const pandemonium_transform *p_b);
	pandemonium_vector3 (*pandemonium_transform_xform_vector3)(const pandemonium_transform *p_self, const pandemonium_vector3 *p_v);
	pandemonium_vector3i (*pandemonium_transform_xform_vector3i)(const pandemonium_transform *p_self, const pandemonium_vector3i *p_vector);
	pandemonium_aabb (*pandemonium_transform_xform_aabb)(const pandemonium_transform *p_self, const pandemonium_aabb *p_v);
	pandemonium_pool_vector3_array (*pandemonium_transform_xform_pool_vector3)(const pandemonium_transform *p_self, const pandemonium_pool_vector3_array *p_array);
	pandemonium_pool_vector3i_array (*pandemonium_transform_xform_pool_vector3i)(const pandemonium_transform *p_self, const pandemonium_pool_vector3i_array *p_array);
	pandemonium_vector3 (*pandemonium_transform_xform_inv_vector3)(const pandemonium_transform *p_self, const pandemonium_vector3 *p_v);
	pandemonium_vector3i (*pandemonium_transform_xform_inv_vector3i)(const pandemonium_transform *p_self, const pandemonium_vector3i *p_vector);
	pandemonium_aabb (*pandemonium_transform_xform_inv_aabb)(const pandemonium_transform *p_self, const pandemonium_aabb *p_v);
	pandemonium_pool_vector3_array (*pandemonium_transform_xform_inv_pool_vector3)(const pandemonium_transform *p_self, const pandemonium_pool_vector3_array *p_array);
	pandemonium_pool_vector3i_array (*pandemonium_transform_xform_inv_pool_vector3i)(const pandemonium_transform *p_self, const pandemonium_pool_vector3i_array *p_array);
	pandemonium_plane (*pandemonium_transform_xform_plane)(const pandemonium_transform *p_self, const pandemonium_plane *p_v);
	pandemonium_plane (*pandemonium_transform_xform_inv_plane)(const pandemonium_transform *p_self, const pandemonium_plane *p_v);
	pandemonium_plane (*pandemonium_transform_xform_fast)(const pandemonium_transform *p_self, const pandemonium_plane *p_plane, const pandemonium_basis *p_basis_inverse_transpose);
	pandemonium_plane (*pandemonium_transform_xform_inv_fast)(const pandemonium_plane *p_plane, const pandemonium_transform *p_inverse, const pandemonium_basis *p_basis_transpose);
	pandemonium_transform (*pandemonium_transform_operator_multiply)(const pandemonium_transform *p_self, const pandemonium_transform *p_b);
	pandemonium_transform (*pandemonium_transform_spherical_interpolate_with)(const pandemonium_transform *p_self, const pandemonium_transform *p_transform, pandemonium_real p_c);
	pandemonium_transform (*pandemonium_transform_interpolate_with)(const pandemonium_transform *p_self, const pandemonium_transform *p_transform, pandemonium_real p_c);
	pandemonium_transform (*pandemonium_transform_inverse_xform)(const pandemonium_transform *p_self, const pandemonium_transform *p_t);
	void (*pandemonium_transform_set)(pandemonium_transform *p_self, pandemonium_real xx, pandemonium_real xy, pandemonium_real xz, pandemonium_real yx, pandemonium_real yy, pandemonium_real yz, pandemonium_real zx, pandemonium_real zy, pandemonium_real zz, pandemonium_real tx, pandemonium_real ty, pandemonium_real tz);
	pandemonium_string (*pandemonium_transform_as_string)(const pandemonium_transform *p_self);
	void (*pandemonium_transform_new_with_axis_origin)(pandemonium_transform *r_dest, const pandemonium_vector3 *p_x_axis, const pandemonium_vector3 *p_y_axis, const pandemonium_vector3 *p_z_axis, const pandemonium_vector3 *p_origin);
	void (*pandemonium_transform_new)(pandemonium_transform *r_dest, const pandemonium_basis *p_basis, const pandemonium_vector3 *p_origin);
	void (*pandemonium_transform_new_with_quaternion)(pandemonium_transform *r_dest, const pandemonium_quaternion *p_quaternion);
	void (*pandemonium_transform_new_identity)(pandemonium_transform *r_dest);
	pandemonium_real (*pandemonium_transform2d_tdotx)(const pandemonium_transform2d *p_self, const pandemonium_vector2 *p_v);
	pandemonium_real (*pandemonium_transform2d_tdoty)(const pandemonium_transform2d *p_self, const pandemonium_vector2 *p_v);
	pandemonium_vector2 (*pandemonium_transform2d_get_axis)(const pandemonium_transform2d *p_self, pandemonium_int p_axis);
	void (*pandemonium_transform2d_set_axis)(pandemonium_transform2d *p_self, pandemonium_int p_axis, const pandemonium_vector2 *p_vec);
	pandemonium_vector2 (*pandemonium_transform2d_get_column)(const pandemonium_transform2d *p_self, pandemonium_int p_colum);
	void (*pandemonium_transform2d_set_column)(pandemonium_transform2d *p_self, pandemonium_int p_colum, const pandemonium_vector2 *p_vec);
	void (*pandemonium_transform2d_invert)(pandemonium_transform2d *p_self);
	pandemonium_transform2d (*pandemonium_transform2d_inverse)(const pandemonium_transform2d *p_self);
	void (*pandemonium_transform2d_affine_invert)(pandemonium_transform2d *p_self);
	pandemonium_transform2d (*pandemonium_transform2d_affine_inverse)(const pandemonium_transform2d *p_self);
	void (*pandemonium_transform2d_set_rotation)(pandemonium_transform2d *p_self, pandemonium_real p_rot);
	pandemonium_real (*pandemonium_transform2d_get_rotation)(const pandemonium_transform2d *p_self);
	pandemonium_real (*pandemonium_transform2d_get_skew)(const pandemonium_transform2d *p_self);
	void (*pandemonium_transform2d_set_skew)(pandemonium_transform2d *p_self, const pandemonium_real p_angle);
	void (*pandemonium_transform2d_set_rotation_and_scale)(pandemonium_transform2d *p_self, pandemonium_real p_rot, const pandemonium_vector2 *p_scale);
	void (*pandemonium_transform2d_set_rotation_scale_and_skew)(pandemonium_transform2d *p_self, const pandemonium_real p_rot, const pandemonium_vector2 *p_scale, const pandemonium_real p_skew);
	void (*pandemonium_transform2d_rotate)(pandemonium_transform2d *p_self, pandemonium_real p_phi);
	void (*pandemonium_transform2d_scale)(pandemonium_transform2d *p_self, const pandemonium_vector2 *p_scale);
	void (*pandemonium_transform2d_scale_basis)(pandemonium_transform2d *p_self, const pandemonium_vector2 *p_scale);
	void (*pandemonium_transform2d_translater)(pandemonium_transform2d *p_self, pandemonium_real p_tx, pandemonium_real p_ty);
	void (*pandemonium_transform2d_translatev)(pandemonium_transform2d *p_self, const pandemonium_vector2 *p_offset);
	void (*pandemonium_transform2d_translate_localr)(pandemonium_transform2d *p_self, pandemonium_real p_tx, pandemonium_real p_ty);
	void (*pandemonium_transform2d_translate_localv)(pandemonium_transform2d *p_self, const pandemonium_vector2 *p_translation);
	pandemonium_real (*pandemonium_transform2d_basis_determinant)(const pandemonium_transform2d *p_self);
	pandemonium_vector2 (*pandemonium_transform2d_get_scale)(const pandemonium_transform2d *p_self);
	void (*pandemonium_transform2d_set_scale)(pandemonium_transform2d *p_self, const pandemonium_vector2 *p_scale);
	pandemonium_vector2 (*pandemonium_transform2d_get_origin)(const pandemonium_transform2d *p_self);
	void (*pandemonium_transform2d_set_origin)(pandemonium_transform2d *p_self, const pandemonium_vector2 *p_origin);
	pandemonium_transform2d (*pandemonium_transform2d_basis_scaled)(const pandemonium_transform2d *p_self, const pandemonium_vector2 *p_scale);
	pandemonium_transform2d (*pandemonium_transform2d_scaled)(const pandemonium_transform2d *p_self, const pandemonium_vector2 *p_scale);
	pandemonium_transform2d (*pandemonium_transform2d_scaled_local)(const pandemonium_transform2d *p_self, const pandemonium_vector2 *p_scale);
	pandemonium_transform2d (*pandemonium_transform2d_translated)(const pandemonium_transform2d *p_self, const pandemonium_vector2 *p_offset);
	pandemonium_transform2d (*pandemonium_transform2d_translated_local)(const pandemonium_transform2d *p_self, const pandemonium_vector2 *p_offset);
	pandemonium_transform2d (*pandemonium_transform2d_rotated)(const pandemonium_transform2d *p_self, const pandemonium_real p_phi);
	pandemonium_transform2d (*pandemonium_transform2d_rotated_local)(const pandemonium_transform2d *p_self, const pandemonium_real p_angle);
	pandemonium_transform2d (*pandemonium_transform2d_untranslated)(const pandemonium_transform2d *p_self);
	void (*pandemonium_transform2d_orthonormalize)(pandemonium_transform2d *p_self);
	pandemonium_transform2d (*pandemonium_transform2d_orthonormalized)(const pandemonium_transform2d *p_self);
	pandemonium_bool (*pandemonium_transform2d_is_equal_approx)(const pandemonium_transform2d *p_self, const pandemonium_transform2d *p_transform);
	pandemonium_transform2d (*pandemonium_transform2d_looking_at)(const pandemonium_transform2d *p_self, const pandemonium_vector2 *p_target);
	pandemonium_bool (*pandemonium_transform2d_operator_equal)(const pandemonium_transform2d *p_self, const pandemonium_transform2d *p_b);
	pandemonium_transform2d (*pandemonium_transform2d_operator_multiply)(const pandemonium_transform2d *p_self, const pandemonium_transform2d *p_b);
	pandemonium_transform2d (*pandemonium_transform2d_interpolate_with)(const pandemonium_transform2d *p_self, const pandemonium_transform2d *p_m, const pandemonium_real p_c);
	pandemonium_vector2 (*pandemonium_transform2d_basis_xform_vector2)(const pandemonium_transform2d *p_self, const pandemonium_vector2 *p_v);
	pandemonium_vector2 (*pandemonium_transform2d_basis_xform_inv_vector2)(const pandemonium_transform2d *p_self, const pandemonium_vector2 *p_v);
	pandemonium_vector2 (*pandemonium_transform2d_xform_vector2)(const pandemonium_transform2d *p_self, const pandemonium_vector2 *p_v);
	pandemonium_vector2 (*pandemonium_transform2d_xform_inv_vector2)(const pandemonium_transform2d *p_self, const pandemonium_vector2 *p_v);
	pandemonium_rect2 (*pandemonium_transform2d_xform_rect2)(const pandemonium_transform2d *p_self, const pandemonium_rect2 *p_v);
	pandemonium_rect2 (*pandemonium_transform2d_xform_inv_rect2)(const pandemonium_transform2d *p_self, const pandemonium_rect2 *p_v);
	pandemonium_vector2i (*pandemonium_transform2d_basis_xform)(const pandemonium_transform2d *p_self, const pandemonium_vector2i *p_vec);
	pandemonium_vector2i (*pandemonium_transform2d_basis_xform_inv)(const pandemonium_transform2d *p_self, const pandemonium_vector2i *p_vec);
	pandemonium_vector2i (*pandemonium_transform2d_xform_vector2i)(const pandemonium_transform2d *p_self, const pandemonium_vector2i *p_vec);
	pandemonium_vector2i (*pandemonium_transform2d_xform_inv_vector2i)(const pandemonium_transform2d *p_self, const pandemonium_vector2i *p_vec);
	pandemonium_pool_vector2_array (*pandemonium_transform_xform_pool_vector2)(const pandemonium_transform2d *p_self, const pandemonium_pool_vector2_array *p_array);
	pandemonium_pool_vector2_array (*pandemonium_transform_xform_inv_pool_vector2)(const pandemonium_transform2d *p_self, const pandemonium_pool_vector2_array *p_array);
	pandemonium_pool_vector2i_array (*pandemonium_transform_xform_inv_pool_vector2i)(const pandemonium_transform2d *p_self, const pandemonium_pool_vector2i_array *p_array);
	pandemonium_pool_vector2i_array (*pandemonium_transform_xform_pool_vector2i)(const pandemonium_transform2d *p_self, const pandemonium_pool_vector2i_array *p_array);
	pandemonium_string (*pandemonium_transform2d_as_string)(const pandemonium_transform2d *p_self);
	void (*pandemonium_transform2d_new)(pandemonium_transform2d *r_dest, const pandemonium_real p_rot, const pandemonium_vector2 *p_pos);
	void (*pandemonium_transform2d_new_axis_origin)(pandemonium_transform2d *r_dest, const pandemonium_vector2 *p_x_axis, const pandemonium_vector2 *p_y_axis, const pandemonium_vector2 *p_origin);
	void (*pandemonium_transform2d_new_identity)(pandemonium_transform2d *r_dest);
	pandemonium_variant_type (*pandemonium_variant_get_type)(const pandemonium_variant *p_v);
	pandemonium_bool (*pandemonium_variant_is_ref)(const pandemonium_variant *p_self);
	pandemonium_bool (*pandemonium_variant_is_num)(const pandemonium_variant *p_self);
	pandemonium_bool (*pandemonium_variant_is_array)(const pandemonium_variant *p_self);
	pandemonium_bool (*pandemonium_variant_is_null)(const pandemonium_variant *p_self);
	pandemonium_bool (*pandemonium_variant_is_shared)(const pandemonium_variant *p_self);
	pandemonium_bool (*pandemonium_variant_is_zero)(const pandemonium_variant *p_self);
	pandemonium_bool (*pandemonium_variant_is_one)(const pandemonium_variant *p_self);
	pandemonium_int (*pandemonium_variant_get_object_instance_id)(const pandemonium_variant *p_self);
	pandemonium_bool (*pandemonium_variant_is_invalid_object)(const pandemonium_variant *p_self);
	pandemonium_string (*pandemonium_variant_get_operator_name)(pandemonium_variant_operator p_op);
	void (*pandemonium_variant_evaluate)(pandemonium_variant_operator p_op, const pandemonium_variant *p_a, const pandemonium_variant *p_b, pandemonium_variant *r_ret, pandemonium_bool *r_valid);
	void (*pandemonium_variant_zero)(pandemonium_variant *p_self);
	pandemonium_variant (*pandemonium_variant_duplicate)(const pandemonium_variant *p_self);
	pandemonium_variant (*pandemonium_variant_duplicate_deep)(const pandemonium_variant *p_self, pandemonium_bool deep);
	pandemonium_variant (*pandemonium_variant_call)(pandemonium_variant *p_self, const pandemonium_string *p_method, const pandemonium_variant **p_args, const pandemonium_int p_argcount, pandemonium_variant_call_error *r_error);
	pandemonium_bool (*pandemonium_variant_has_method)(const pandemonium_variant *p_self, const pandemonium_string *p_method);
	pandemonium_bool (*pandemonium_variant_deep_equal)(const pandemonium_variant *p_self, const pandemonium_variant *p_variant);
	pandemonium_bool (*pandemonium_variant_deep_equal_recursion_count)(const pandemonium_variant *p_self, const pandemonium_variant *p_variant, pandemonium_int p_recursion_count);
	pandemonium_bool (*pandemonium_variant_operator_equal)(const pandemonium_variant *p_self, const pandemonium_variant *p_other);
	pandemonium_bool (*pandemonium_variant_operator_less)(const pandemonium_variant *p_self, const pandemonium_variant *p_other);
	pandemonium_int (*pandemonium_variant_hash)(const pandemonium_variant *p_self);
	pandemonium_bool (*pandemonium_variant_hash_compare)(const pandemonium_variant *p_self, const pandemonium_variant *p_other);
	pandemonium_bool (*pandemonium_variant_booleanize)(const pandemonium_variant *p_self);
	pandemonium_bool (*pandemonium_variant_as_bool)(const pandemonium_variant *p_self);
	uint64_t (*pandemonium_variant_as_uint)(const pandemonium_variant *p_self);
	int64_t (*pandemonium_variant_as_int)(const pandemonium_variant *p_self);
	double (*pandemonium_variant_as_real)(const pandemonium_variant *p_self);
	pandemonium_string (*pandemonium_variant_as_string)(const pandemonium_variant *p_self);
	pandemonium_string_name (*pandemonium_variant_as_string_name)(const pandemonium_variant *p_self);
	pandemonium_vector2 (*pandemonium_variant_as_vector2)(const pandemonium_variant *p_self);
	pandemonium_vector2i (*pandemonium_variant_as_vector2i)(const pandemonium_variant *p_self);
	pandemonium_rect2 (*pandemonium_variant_as_rect2)(const pandemonium_variant *p_self);
	pandemonium_rect2i (*pandemonium_variant_as_rect2i)(const pandemonium_variant *p_self);
	pandemonium_vector3 (*pandemonium_variant_as_vector3)(const pandemonium_variant *p_self);
	pandemonium_vector3i (*pandemonium_variant_as_vector3i)(const pandemonium_variant *p_self);
	pandemonium_vector4 (*pandemonium_variant_as_vector4)(const pandemonium_variant *p_self);
	pandemonium_vector4i (*pandemonium_variant_as_vector4i)(const pandemonium_variant *p_self);
	pandemonium_transform2d (*pandemonium_variant_as_transform2d)(const pandemonium_variant *p_self);
	pandemonium_plane (*pandemonium_variant_as_plane)(const pandemonium_variant *p_self);
	pandemonium_quaternion (*pandemonium_variant_as_quaternion)(const pandemonium_variant *p_self);
	pandemonium_aabb (*pandemonium_variant_as_aabb)(const pandemonium_variant *p_self);
	pandemonium_basis (*pandemonium_variant_as_basis)(const pandemonium_variant *p_self);
	pandemonium_transform (*pandemonium_variant_as_transform)(const pandemonium_variant *p_self);
	pandemonium_projection (*pandemonium_variant_as_projection)(const pandemonium_variant *p_self);
	pandemonium_color (*pandemonium_variant_as_color)(const pandemonium_variant *p_self);
	pandemonium_node_path (*pandemonium_variant_as_node_path)(const pandemonium_variant *p_self);
	pandemonium_rid (*pandemonium_variant_as_rid)(const pandemonium_variant *p_self);
	pandemonium_object *(*pandemonium_variant_as_object)(const pandemonium_variant *p_self);
	pandemonium_dictionary (*pandemonium_variant_as_dictionary)(const pandemonium_variant *p_self);
	pandemonium_array (*pandemonium_variant_as_array)(const pandemonium_variant *p_self);
	pandemonium_pool_byte_array (*pandemonium_variant_as_pool_byte_array)(const pandemonium_variant *p_self);
	pandemonium_pool_int_array (*pandemonium_variant_as_pool_int_array)(const pandemonium_variant *p_self);
	pandemonium_pool_real_array (*pandemonium_variant_as_pool_real_array)(const pandemonium_variant *p_self);
	pandemonium_pool_string_array (*pandemonium_variant_as_pool_string_array)(const pandemonium_variant *p_self);
	pandemonium_pool_vector2_array (*pandemonium_variant_as_pool_vector2_array)(const pandemonium_variant *p_self);
	pandemonium_pool_vector2i_array (*pandemonium_variant_as_pool_vector2i_array)(const pandemonium_variant *p_self);
	pandemonium_pool_vector3_array (*pandemonium_variant_as_pool_vector3_array)(const pandemonium_variant *p_self);
	pandemonium_pool_vector3i_array (*pandemonium_variant_as_pool_vector3i_array)(const pandemonium_variant *p_self);
	pandemonium_pool_vector4_array (*pandemonium_variant_as_pool_vector4_array)(const pandemonium_variant *p_self);
	pandemonium_pool_vector4i_array (*pandemonium_variant_as_pool_vector4i_array)(const pandemonium_variant *p_self);
	pandemonium_pool_color_array (*pandemonium_variant_as_pool_color_array)(const pandemonium_variant *p_self);
	void (*pandemonium_variant_new_copy)(pandemonium_variant *r_dest, const pandemonium_variant *p_src);
	void (*pandemonium_variant_new_nil)(pandemonium_variant *r_dest);
	void (*pandemonium_variant_new_bool)(pandemonium_variant *r_dest, const pandemonium_bool p_b);
	void (*pandemonium_variant_new_uint)(pandemonium_variant *r_dest, const uint64_t p_i);
	void (*pandemonium_variant_new_int)(pandemonium_variant *r_dest, const int64_t p_i);
	void (*pandemonium_variant_new_real)(pandemonium_variant *r_dest, const double p_r);
	void (*pandemonium_variant_new_string)(pandemonium_variant *r_dest, const pandemonium_string *p_s);
	void (*pandemonium_variant_new_string_name)(pandemonium_variant *r_dest, const pandemonium_string_name *p_s);
	void (*pandemonium_variant_new_vector2)(pandemonium_variant *r_dest, const pandemonium_vector2 *p_v2);
	void (*pandemonium_variant_new_vector2i)(pandemonium_variant *r_dest, const pandemonium_vector2i *p_v2i);
	void (*pandemonium_variant_new_rect2)(pandemonium_variant *r_dest, const pandemonium_rect2 *p_rect2);
	void (*pandemonium_variant_new_rect2i)(pandemonium_variant *r_dest, const pandemonium_rect2i *p_rect2i);
	void (*pandemonium_variant_new_vector3)(pandemonium_variant *r_dest, const pandemonium_vector3 *p_v3);
	void (*pandemonium_variant_new_vector3i)(pandemonium_variant *r_dest, const pandemonium_vector3i *p_v3i);
	void (*pandemonium_variant_new_vector4)(pandemonium_variant *r_dest, const pandemonium_vector4 *p_v4);
	void (*pandemonium_variant_new_vector4i)(pandemonium_variant *r_dest, const pandemonium_vector4i *p_v4i);
	void (*pandemonium_variant_new_transform2d)(pandemonium_variant *r_dest, const pandemonium_transform2d *p_t2d);
	void (*pandemonium_variant_new_plane)(pandemonium_variant *r_dest, const pandemonium_plane *p_plane);
	void (*pandemonium_variant_new_quaternion)(pandemonium_variant *r_dest, const pandemonium_quaternion *p_quaternion);
	void (*pandemonium_variant_new_aabb)(pandemonium_variant *r_dest, const pandemonium_aabb *p_aabb);
	void (*pandemonium_variant_new_basis)(pandemonium_variant *r_dest, const pandemonium_basis *p_basis);
	void (*pandemonium_variant_new_transform)(pandemonium_variant *r_dest, const pandemonium_transform *p_trans);
	void (*pandemonium_variant_new_projection)(pandemonium_variant *r_dest, const pandemonium_projection *p_proj);
	void (*pandemonium_variant_new_color)(pandemonium_variant *r_dest, const pandemonium_color *p_color);
	void (*pandemonium_variant_new_node_path)(pandemonium_variant *r_dest, const pandemonium_node_path *p_np);
	void (*pandemonium_variant_new_rid)(pandemonium_variant *r_dest, const pandemonium_rid *p_rid);
	void (*pandemonium_variant_new_object)(pandemonium_variant *r_dest, const pandemonium_object *p_obj);
	void (*pandemonium_variant_new_dictionary)(pandemonium_variant *r_dest, const pandemonium_dictionary *p_dict);
	void (*pandemonium_variant_new_array)(pandemonium_variant *r_dest, const pandemonium_array *p_arr);
	void (*pandemonium_variant_new_pool_byte_array)(pandemonium_variant *r_dest, const pandemonium_pool_byte_array *p_pba);
	void (*pandemonium_variant_new_pool_int_array)(pandemonium_variant *r_dest, const pandemonium_pool_int_array *p_pia);
	void (*pandemonium_variant_new_pool_real_array)(pandemonium_variant *r_dest, const pandemonium_pool_real_array *p_pra);
	void (*pandemonium_variant_new_pool_string_array)(pandemonium_variant *r_dest, const pandemonium_pool_string_array *p_psa);
	void (*pandemonium_variant_new_pool_vector2_array)(pandemonium_variant *r_dest, const pandemonium_pool_vector2_array *p_pv2a);
	void (*pandemonium_variant_new_pool_vector2i_array)(pandemonium_variant *r_dest, const pandemonium_pool_vector2i_array *p_pv2ia);
	void (*pandemonium_variant_new_pool_vector3_array)(pandemonium_variant *r_dest, const pandemonium_pool_vector3_array *p_pv3a);
	void (*pandemonium_variant_new_pool_vector3i_array)(pandemonium_variant *r_dest, const pandemonium_pool_vector3i_array *p_pv3ia);
	void (*pandemonium_variant_new_pool_vector4_array)(pandemonium_variant *r_dest, const pandemonium_pool_vector4_array *p_pv4a);
	void (*pandemonium_variant_new_pool_vector4i_array)(pandemonium_variant *r_dest, const pandemonium_pool_vector4i_array *p_pv4ia);
	void (*pandemonium_variant_new_pool_color_array)(pandemonium_variant *r_dest, const pandemonium_pool_color_array *p_pca);
	void (*pandemonium_variant_destroy)(pandemonium_variant *p_self);
	void (*pandemonium_vector2_set_x)(pandemonium_vector2 *p_self, const pandemonium_real p_x);
	void (*pandemonium_vector2_set_y)(pandemonium_vector2 *p_self, const pandemonium_real p_y);
	pandemonium_real (*pandemonium_vector2_get_x)(const pandemonium_vector2 *p_self);
	pandemonium_real (*pandemonium_vector2_get_y)(const pandemonium_vector2 *p_self);
	pandemonium_real *(*pandemonium_vector2_operator_index)(pandemonium_vector2 *p_self, const pandemonium_int p_idx);
	const pandemonium_real *(*pandemonium_vector2_operator_index_const)(const pandemonium_vector2 *p_self, const pandemonium_int p_idx);
	void (*pandemonium_vector2_set_axis)(pandemonium_vector2 *p_self, const pandemonium_vector2_axis p_axis, const pandemonium_real p_value);
	pandemonium_real (*pandemonium_vector2_get_axis)(const pandemonium_vector2 *p_self, const pandemonium_vector2_axis p_axis);
	void (*pandemonium_vector2_set_all)(pandemonium_vector2 *p_self, const pandemonium_real p_value);
	pandemonium_int (*pandemonium_vector2_min_axis)(const pandemonium_vector2 *p_self);
	pandemonium_int (*pandemonium_vector2_max_axis)(const pandemonium_vector2 *p_self);
	void (*pandemonium_vector2_normalize)(pandemonium_vector2 *p_self);
	pandemonium_vector2 (*pandemonium_vector2_normalized)(const pandemonium_vector2 *p_self);
	pandemonium_bool (*pandemonium_vector2_is_normalized)(const pandemonium_vector2 *p_self);
	pandemonium_real (*pandemonium_vector2_length)(const pandemonium_vector2 *p_self);
	pandemonium_real (*pandemonium_vector2_length_squared)(const pandemonium_vector2 *p_self);
	pandemonium_vector2 (*pandemonium_vector2_limit_length)(const pandemonium_vector2 *p_self, const pandemonium_real p_length);
	pandemonium_vector2 (*pandemonium_vector2_min)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_b);
	pandemonium_vector2 (*pandemonium_vector2_max)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_b);
	pandemonium_real (*pandemonium_vector2_distance_to)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_to);
	pandemonium_real (*pandemonium_vector2_distance_squared_to)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_to);
	pandemonium_real (*pandemonium_vector2_angle_to)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_to);
	pandemonium_real (*pandemonium_vector2_angle_to_point)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_to);
	pandemonium_vector2 (*pandemonium_vector2_direction_to)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_b);
	pandemonium_real (*pandemonium_vector2_dot)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_other);
	pandemonium_real (*pandemonium_vector2_cross)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_other);
	pandemonium_vector2 (*pandemonium_vector2_posmod)(const pandemonium_vector2 *p_self, const pandemonium_real p_mod);
	pandemonium_vector2 (*pandemonium_vector2_posmodv)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_modv);
	pandemonium_vector2 (*pandemonium_vector2_project)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_to);
	pandemonium_vector2 (*pandemonium_vector2_plane_project)(const pandemonium_vector2 *p_self, const pandemonium_real p_length, const pandemonium_vector2 *p_vec);
	pandemonium_vector2 (*pandemonium_vector2_linear_interpolate)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_b, const pandemonium_real p_t);
	pandemonium_vector2 (*pandemonium_vector2_slerp)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_to, const pandemonium_real p_weight);
	pandemonium_vector2 (*pandemonium_vector2_cubic_interpolate)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_b, const pandemonium_vector2 *p_pre_a, const pandemonium_vector2 *p_post_b, const pandemonium_real p_t);
	pandemonium_vector2 (*pandemonium_vector2_bezier_interpolate)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_control_1, const pandemonium_vector2 *p_control_2, const pandemonium_vector2 *p_end, const pandemonium_real p_t);
	pandemonium_vector2 (*pandemonium_vector2_move_toward)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_to, const pandemonium_real p_delta);
	pandemonium_vector2 (*pandemonium_vector2_slide)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_n);
	pandemonium_vector2 (*pandemonium_vector2_bounce)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_n);
	pandemonium_vector2 (*pandemonium_vector2_reflect)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_n);
	pandemonium_bool (*pandemonium_vector2_is_equal_approx)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_b);
	pandemonium_vector2 (*pandemonium_vector2_operator_add)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_b);
	pandemonium_vector2 (*pandemonium_vector2_operator_subtract)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_b);
	pandemonium_vector2 (*pandemonium_vector2_operator_multiply_vector)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_b);
	pandemonium_vector2 (*pandemonium_vector2_operator_multiply_scalar)(const pandemonium_vector2 *p_self, const pandemonium_real p_b);
	pandemonium_vector2 (*pandemonium_vector2_operator_divide_vector)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_b);
	pandemonium_vector2 (*pandemonium_vector2_operator_divide_scalar)(const pandemonium_vector2 *p_self, const pandemonium_real p_b);
	pandemonium_vector2 (*pandemonium_vector2_operator_neg)(const pandemonium_vector2 *p_self);
	pandemonium_bool (*pandemonium_vector2_operator_equal)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_b);
	pandemonium_bool (*pandemonium_vector2_operator_less)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_b);
	pandemonium_real (*pandemonium_vector2_angle)(const pandemonium_vector2 *p_self);
	void (*pandemonium_vector2_set_rotation)(pandemonium_vector2 *p_self, const pandemonium_real p_phi);
	pandemonium_vector2 (*pandemonium_vector2_abs)(const pandemonium_vector2 *p_self);
	pandemonium_vector2 (*pandemonium_vector2_rotated)(const pandemonium_vector2 *p_self, const pandemonium_real p_phi);
	pandemonium_vector2 (*pandemonium_vector2_tangent)(const pandemonium_vector2 *p_self);
	pandemonium_vector2 (*pandemonium_vector2_orthogonal)(const pandemonium_vector2 *p_self);
	pandemonium_vector2 (*pandemonium_vector2_sign)(const pandemonium_vector2 *p_self);
	pandemonium_vector2 (*pandemonium_vector2_floor)(const pandemonium_vector2 *p_self);
	pandemonium_vector2 (*pandemonium_vector2_ceil)(const pandemonium_vector2 *p_self);
	pandemonium_vector2 (*pandemonium_vector2_round)(const pandemonium_vector2 *p_self);
	pandemonium_vector2 (*pandemonium_vector2_snapped)(const pandemonium_vector2 *p_self, const pandemonium_vector2 *p_by);
	pandemonium_real (*pandemonium_vector2_aspect)(const pandemonium_vector2 *p_self);
	pandemonium_string (*pandemonium_vector2_as_string)(const pandemonium_vector2 *p_self);
	void (*pandemonium_vector2_new)(pandemonium_vector2 *r_dest, const pandemonium_real p_x, const pandemonium_real p_y);
	void (*pandemonium_vector2i_set_x)(pandemonium_vector2i *p_self, const pandemonium_int p_x);
	void (*pandemonium_vector2i_set_y)(pandemonium_vector2i *p_self, const pandemonium_int p_y);
	pandemonium_int (*pandemonium_vector2i_get_x)(const pandemonium_vector2i *p_self);
	pandemonium_int (*pandemonium_vector2i_get_y)(const pandemonium_vector2i *p_self);
	pandemonium_int *(*pandemonium_vector2i_operator_index)(pandemonium_vector2i *p_self, const pandemonium_int p_idx);
	const pandemonium_int *(*pandemonium_vector2i_operator_index_const)(const pandemonium_vector2i *p_self, const pandemonium_int p_idx);
	void (*pandemonium_vector2i_set_axis)(pandemonium_vector2i *p_self, const pandemonium_vector2i_axis p_axis, const pandemonium_int p_value);
	pandemonium_int (*pandemonium_vector2i_get_axis)(const pandemonium_vector2i *p_self, const pandemonium_vector2i_axis p_axis);
	void (*pandemonium_vector2i_set_all)(pandemonium_vector2i *p_self, const pandemonium_int p_value);
	pandemonium_int (*pandemonium_vector2i_min_axis)(const pandemonium_vector2i *p_self);
	pandemonium_int (*pandemonium_vector2i_max_axis)(const pandemonium_vector2i *p_self);
	pandemonium_vector2i (*pandemonium_vector2i_min)(const pandemonium_vector2i *p_self, const pandemonium_vector2i *p_b);
	pandemonium_vector2i (*pandemonium_vector2i_max)(const pandemonium_vector2i *p_self, const pandemonium_vector2i *p_b);
	pandemonium_vector2i (*pandemonium_vector2i_linear_interpolate)(const pandemonium_vector2i *p_self, const pandemonium_vector2i *p_b, const pandemonium_real p_t);
	pandemonium_vector2i (*pandemonium_vector2i_operator_add)(const pandemonium_vector2i *p_self, const pandemonium_vector2i *p_b);
	pandemonium_vector2i (*pandemonium_vector2i_operator_subtract)(const pandemonium_vector2i *p_self, const pandemonium_vector2i *p_b);
	pandemonium_vector2i (*pandemonium_vector2i_operator_multiply_vector)(const pandemonium_vector2i *p_self, const pandemonium_vector2i *p_b);
	pandemonium_vector2i (*pandemonium_vector2i_operator_multiply_scalar)(const pandemonium_vector2i *p_self, const pandemonium_int p_b);
	pandemonium_vector2i (*pandemonium_vector2i_operator_divide_vector)(const pandemonium_vector2i *p_self, const pandemonium_vector2i *p_b);
	pandemonium_vector2i (*pandemonium_vector2i_operator_divide_scalar)(const pandemonium_vector2i *p_self, const pandemonium_int p_b);
	pandemonium_vector2i (*pandemonium_vector2i_operator_neg)(const pandemonium_vector2i *p_self);
	pandemonium_bool (*pandemonium_vector2i_operator_equal)(const pandemonium_vector2i *p_self, const pandemonium_vector2i *p_b);
	pandemonium_bool (*pandemonium_vector2i_operator_less)(const pandemonium_vector2i *p_self, const pandemonium_vector2i *p_b);
	pandemonium_real (*pandemonium_vector2i_length)(const pandemonium_vector2i *p_self);
	pandemonium_int (*pandemonium_vector2i_length_squared)(const pandemonium_vector2i *p_self);
	pandemonium_real (*pandemonium_vector2i_aspect)(const pandemonium_vector2i *p_self);
	pandemonium_vector2i (*pandemonium_vector2i_sign)(const pandemonium_vector2i *p_self);
	pandemonium_vector2i (*pandemonium_vector2i_abs)(const pandemonium_vector2i *p_self);
	pandemonium_vector2i (*pandemonium_vector2i_clamp)(const pandemonium_vector2i *p_self, const pandemonium_vector2i *p_min, const pandemonium_vector2i *p_max);
	pandemonium_vector2 (*pandemonium_vector2i_to_vector2)(const pandemonium_vector2i *p_self);
	pandemonium_string (*pandemonium_vector2i_as_string)(const pandemonium_vector2i *p_self);
	void (*pandemonium_vector2i_new)(pandemonium_vector2i *r_dest, const pandemonium_int p_x, const pandemonium_int p_y);
	pandemonium_real (*pandemonium_vector3_get_x)(const pandemonium_vector3 *p_self);
	void (*pandemonium_vector3_set_x)(pandemonium_vector3 *p_self, const pandemonium_real val);
	pandemonium_real (*pandemonium_vector3_get_y)(const pandemonium_vector3 *p_self);
	void (*pandemonium_vector3_set_y)(pandemonium_vector3 *p_self, const pandemonium_real val);
	pandemonium_real (*pandemonium_vector3_get_z)(const pandemonium_vector3 *p_self);
	void (*pandemonium_vector3_set_z)(pandemonium_vector3 *p_self, const pandemonium_real val);
	pandemonium_real *(*pandemonium_vector3_operator_index)(pandemonium_vector3 *p_self, const pandemonium_int p_idx);
	const pandemonium_real *(*pandemonium_vector3_operator_index_const)(const pandemonium_vector3 *p_self, const pandemonium_int p_idx);
	void (*pandemonium_vector3_set_axis)(pandemonium_vector3 *p_self, const pandemonium_vector3_axis p_axis, const pandemonium_real p_val);
	pandemonium_real (*pandemonium_vector3_get_axis)(const pandemonium_vector3 *p_self, const pandemonium_vector3_axis p_axis);
	void (*pandemonium_vector3_set_all)(pandemonium_vector3 *p_self, const pandemonium_real p_val);
	pandemonium_int (*pandemonium_vector3_min_axis)(const pandemonium_vector3 *p_self);
	pandemonium_int (*pandemonium_vector3_max_axis)(const pandemonium_vector3 *p_self);
	pandemonium_real (*pandemonium_vector3_length)(const pandemonium_vector3 *p_self);
	pandemonium_real (*pandemonium_vector3_length_squared)(const pandemonium_vector3 *p_self);
	void (*pandemonium_vector3_normalize)(pandemonium_vector3 *p_self);
	pandemonium_vector3 (*pandemonium_vector3_normalized)(const pandemonium_vector3 *p_self);
	pandemonium_bool (*pandemonium_vector3_is_normalized)(const pandemonium_vector3 *p_self);
	pandemonium_vector3 (*pandemonium_vector3_inverse)(const pandemonium_vector3 *p_self);
	pandemonium_vector3 (*pandemonium_vector3_limit_length)(const pandemonium_vector3 *p_self);
	pandemonium_vector3 (*pandemonium_vector3_limit_length_len)(const pandemonium_vector3 *p_self, const pandemonium_real p_val);
	void (*pandemonium_vector3_zero)(pandemonium_vector3 *p_self);
	void (*pandemonium_vector3_snap)(pandemonium_vector3 *p_self, const pandemonium_vector3 *p_val);
	pandemonium_vector3 (*pandemonium_vector3_snapped)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_by);
	void (*pandemonium_vector3_rotate)(pandemonium_vector3 *p_self, const pandemonium_vector3 *p_axis, const pandemonium_real p_phi);
	pandemonium_vector3 (*pandemonium_vector3_rotated)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_axis, const pandemonium_real p_phi);
	pandemonium_vector3 (*pandemonium_vector3_linear_interpolate)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b, const pandemonium_real p_t);
	pandemonium_vector3 (*pandemonium_vector3_slerp)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_to, const pandemonium_real p_weight);
	pandemonium_vector3 (*pandemonium_vector3_cubic_interpolate)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b, const pandemonium_vector3 *p_pre_a, const pandemonium_vector3 *p_post_b, const pandemonium_real p_t);
	pandemonium_vector3 (*pandemonium_vector3_bezier_interpolate)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_control_1, const pandemonium_vector3 *p_control_2, const pandemonium_vector3 *p_end, const pandemonium_real p_t);
	pandemonium_vector3 (*pandemonium_vector3_move_toward)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_to, const pandemonium_real p_delta);
	pandemonium_vector3 (*pandemonium_vector3_cross)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b);
	pandemonium_real (*pandemonium_vector3_dot)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b);
	pandemonium_basis (*pandemonium_vector3_outer)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b);
	pandemonium_basis (*pandemonium_vector3_to_diagonal_matrix)(const pandemonium_vector3 *p_self);
	pandemonium_vector3 (*pandemonium_vector3_abs)(const pandemonium_vector3 *p_self);
	pandemonium_vector3 (*pandemonium_vector3_floor)(const pandemonium_vector3 *p_self);
	pandemonium_vector3 (*pandemonium_vector3_sign)(const pandemonium_vector3 *p_self);
	pandemonium_vector3 (*pandemonium_vector3_ceil)(const pandemonium_vector3 *p_self);
	pandemonium_vector3 (*pandemonium_vector3_round)(const pandemonium_vector3 *p_self);
	pandemonium_vector3 (*pandemonium_vector3_clamp)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_min, const pandemonium_vector3 *p_max);
	pandemonium_real (*pandemonium_vector3_distance_to)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b);
	pandemonium_real (*pandemonium_vector3_distance_squared_to)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b);
	pandemonium_vector3 (*pandemonium_vector3_posmod)(const pandemonium_vector3 *p_self, const pandemonium_real p_mod);
	pandemonium_vector3 (*pandemonium_vector3_posmodv)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_modv);
	pandemonium_vector3 (*pandemonium_vector3_project)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_to);
	pandemonium_real (*pandemonium_vector3_angle_to)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_to);
	pandemonium_real (*pandemonium_vector3_signed_angle_to)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_to, const pandemonium_vector3 *p_axis);
	pandemonium_vector3 (*pandemonium_vector3_direction_to)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b);
	pandemonium_vector3 (*pandemonium_vector3_slide)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_n);
	pandemonium_vector3 (*pandemonium_vector3_bounce)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_n);
	pandemonium_vector3 (*pandemonium_vector3_reflect)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_n);
	pandemonium_bool (*pandemonium_vector3_is_equal_approx)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_v);
	pandemonium_bool (*pandemonium_vector3_is_equal_approx_tolerance)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_v, const pandemonium_real p_tolerance);
	pandemonium_bool (*pandemonium_vector3_is_equal_approxt)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_v, const pandemonium_real p_tolerance);
	pandemonium_vector3 (*pandemonium_vector3_operator_add)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b);
	pandemonium_vector3 (*pandemonium_vector3_operator_subtract)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b);
	pandemonium_vector3 (*pandemonium_vector3_operator_multiply_vector)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b);
	pandemonium_vector3 (*pandemonium_vector3_operator_multiply_scalar)(const pandemonium_vector3 *p_self, const pandemonium_real p_b);
	pandemonium_vector3 (*pandemonium_vector3_operator_divide_vector)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b);
	pandemonium_vector3 (*pandemonium_vector3_operator_divide_scalar)(const pandemonium_vector3 *p_self, const pandemonium_real p_b);
	pandemonium_vector3 (*pandemonium_vector3_operator_neg)(const pandemonium_vector3 *p_self);
	pandemonium_bool (*pandemonium_vector3_operator_equal)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b);
	pandemonium_bool (*pandemonium_vector3_operator_less)(const pandemonium_vector3 *p_self, const pandemonium_vector3 *p_b);
	pandemonium_string (*pandemonium_vector3_as_string)(const pandemonium_vector3 *p_self);
	void (*pandemonium_vector3_new)(pandemonium_vector3 *r_dest, const pandemonium_real p_x, const pandemonium_real p_y, const pandemonium_real p_z);
	pandemonium_int (*pandemonium_vector3i_get_x)(const pandemonium_vector3i *p_self);
	void (*pandemonium_vector3i_set_x)(pandemonium_vector3i *p_self, const pandemonium_int val);
	pandemonium_int (*pandemonium_vector3i_get_y)(const pandemonium_vector3i *p_self);
	void (*pandemonium_vector3i_set_y)(pandemonium_vector3i *p_self, const pandemonium_int val);
	pandemonium_int (*pandemonium_vector3i_get_z)(const pandemonium_vector3i *p_self);
	void (*pandemonium_vector3i_set_z)(pandemonium_vector3i *p_self, const pandemonium_int val);
	pandemonium_int *(*pandemonium_vector3i_operator_index)(pandemonium_vector3i *p_self, const pandemonium_int p_idx);
	const pandemonium_int *(*pandemonium_vector3i_operator_index_const)(const pandemonium_vector3i *p_self, const pandemonium_int p_idx);
	void (*pandemonium_vector3i_set_axis)(pandemonium_vector3i *p_self, const pandemonium_vector3i_axis p_axis, const pandemonium_int p_val);
	pandemonium_int (*pandemonium_vector3i_get_axis)(const pandemonium_vector3i *p_self, const pandemonium_vector3i_axis p_axis);
	void (*pandemonium_vector3i_set_all)(pandemonium_vector3i *p_self, const pandemonium_int p_val);
	pandemonium_int (*pandemonium_vector3i_min_axis)(const pandemonium_vector3i *p_self);
	pandemonium_int (*pandemonium_vector3i_max_axis)(const pandemonium_vector3i *p_self);
	pandemonium_real (*pandemonium_vector3i_length)(const pandemonium_vector3i *p_self);
	pandemonium_int (*pandemonium_vector3i_length_squared)(const pandemonium_vector3i *p_self);
	void (*pandemonium_vector3i_zero)(pandemonium_vector3i *p_self);
	pandemonium_vector3i (*pandemonium_vector3i_linear_interpolate)(const pandemonium_vector3i *p_self, const pandemonium_vector3i *p_b, const pandemonium_real p_t);
	pandemonium_vector3i (*pandemonium_vector3i_abs)(const pandemonium_vector3i *p_self);
	pandemonium_vector3i (*pandemonium_vector3i_sign)(const pandemonium_vector3i *p_self);
	pandemonium_vector3i (*pandemonium_vector3i_clamp)(const pandemonium_vector3i *p_self, const pandemonium_vector3i *p_min, const pandemonium_vector3i *p_max);
	pandemonium_vector3i (*pandemonium_vector3i_operator_add)(const pandemonium_vector3i *p_self, const pandemonium_vector3i *p_b);
	pandemonium_vector3i (*pandemonium_vector3i_operator_subtract)(const pandemonium_vector3i *p_self, const pandemonium_vector3i *p_b);
	pandemonium_vector3i (*pandemonium_vector3i_operator_multiply_vector)(const pandemonium_vector3i *p_self, const pandemonium_vector3i *p_b);
	pandemonium_vector3i (*pandemonium_vector3i_operator_multiply_scalar)(const pandemonium_vector3i *p_self, const pandemonium_int p_b);
	pandemonium_vector3i (*pandemonium_vector3i_operator_divide_vector)(const pandemonium_vector3i *p_self, const pandemonium_vector3i *p_b);
	pandemonium_vector3i (*pandemonium_vector3i_operator_divide_scalar)(const pandemonium_vector3i *p_self, const pandemonium_int p_b);
	pandemonium_vector3i (*pandemonium_vector3i_operator_neg)(const pandemonium_vector3i *p_self);
	pandemonium_bool (*pandemonium_vector3i_operator_equal)(const pandemonium_vector3i *p_self, const pandemonium_vector3i *p_b);
	pandemonium_bool (*pandemonium_vector3i_operator_less)(const pandemonium_vector3i *p_self, const pandemonium_vector3i *p_b);
	pandemonium_vector3 (*pandemonium_vector3i_to_vector3)(const pandemonium_vector3i *p_self);
	pandemonium_string (*pandemonium_vector3i_as_string)(const pandemonium_vector3i *p_self);
	void (*pandemonium_vector3i_new)(pandemonium_vector3i *r_dest, const pandemonium_int p_x, const pandemonium_int p_y, const pandemonium_int p_z);
	pandemonium_real (*pandemonium_vector4_get_x)(const pandemonium_vector4 *p_self);
	void (*pandemonium_vector4_set_x)(pandemonium_vector4 *p_self, const pandemonium_real val);
	pandemonium_real (*pandemonium_vector4_get_y)(const pandemonium_vector4 *p_self);
	void (*pandemonium_vector4_set_y)(pandemonium_vector4 *p_self, const pandemonium_real val);
	pandemonium_real (*pandemonium_vector4_get_z)(const pandemonium_vector4 *p_self);
	void (*pandemonium_vector4_set_z)(pandemonium_vector4 *p_self, const pandemonium_real val);
	pandemonium_real (*pandemonium_vector4_get_w)(const pandemonium_vector4 *p_self);
	void (*pandemonium_vector4_set_w)(pandemonium_vector4 *p_self, const pandemonium_real val);
	pandemonium_real *(*pandemonium_vector4_operator_index)(pandemonium_vector4 *p_self, const pandemonium_int p_idx);
	const pandemonium_real *(*pandemonium_vector4_operator_index_const)(const pandemonium_vector4 *p_self, const pandemonium_int p_idx);
	void (*pandemonium_vector4_set_axis)(pandemonium_vector4 *p_self, const pandemonium_vector4_axis p_axis, const pandemonium_real p_val);
	pandemonium_real (*pandemonium_vector4_get_axis)(const pandemonium_vector4 *p_self, const pandemonium_vector4_axis p_axis);
	void (*pandemonium_vector4_set_all)(pandemonium_vector4 *p_self, const pandemonium_real p_val);
	pandemonium_int (*pandemonium_vector4_min_axis)(const pandemonium_vector4 *p_self);
	pandemonium_int (*pandemonium_vector4_max_axis)(const pandemonium_vector4 *p_self);
	pandemonium_real (*pandemonium_vector4_length)(const pandemonium_vector4 *p_self);
	pandemonium_real (*pandemonium_vector4_length_squared)(const pandemonium_vector4 *p_self);
	void (*pandemonium_vector4_normalize)(pandemonium_vector4 *p_self);
	pandemonium_vector4 (*pandemonium_vector4_normalized)(const pandemonium_vector4 *p_self);
	pandemonium_bool (*pandemonium_vector4_is_normalized)(const pandemonium_vector4 *p_self);
	pandemonium_vector4 (*pandemonium_vector4_inverse)(const pandemonium_vector4 *p_self);
	pandemonium_vector4 (*pandemonium_vector4_limit_length)(const pandemonium_vector4 *p_self);
	pandemonium_vector4 (*pandemonium_vector4_limit_length_len)(const pandemonium_vector4 *p_self, const pandemonium_real p_val);
	void (*pandemonium_vector4_zero)(pandemonium_vector4 *p_self);
	void (*pandemonium_vector4_snap)(pandemonium_vector4 *p_self, const pandemonium_vector4 *p_val);
	pandemonium_vector4 (*pandemonium_vector4_snapped)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_by);
	pandemonium_vector4 (*pandemonium_vector4_linear_interpolate)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_b, const pandemonium_real p_t);
	pandemonium_vector4 (*pandemonium_vector4_cubic_interpolate)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_b, const pandemonium_vector4 *p_pre_a, const pandemonium_vector4 *p_post_b, const pandemonium_real p_t);
	pandemonium_real (*pandemonium_vector4_dot)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_b);
	pandemonium_vector4 (*pandemonium_vector4_abs)(const pandemonium_vector4 *p_self);
	pandemonium_vector4 (*pandemonium_vector4_floor)(const pandemonium_vector4 *p_self);
	pandemonium_vector4 (*pandemonium_vector4_sign)(const pandemonium_vector4 *p_self);
	pandemonium_vector4 (*pandemonium_vector4_ceil)(const pandemonium_vector4 *p_self);
	pandemonium_vector4 (*pandemonium_vector4_round)(const pandemonium_vector4 *p_self);
	pandemonium_vector4 (*pandemonium_vector4_clamp)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_min, const pandemonium_vector4 *p_max);
	pandemonium_real (*pandemonium_vector4_distance_to)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_b);
	pandemonium_real (*pandemonium_vector4_distance_squared_to)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_b);
	pandemonium_vector4 (*pandemonium_vector4_posmod)(const pandemonium_vector4 *p_self, const pandemonium_real p_mod);
	pandemonium_vector4 (*pandemonium_vector4_posmodv)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_modv);
	pandemonium_vector4 (*pandemonium_vector4_direction_to)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_b);
	pandemonium_bool (*pandemonium_vector4_is_equal_approx)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_v);
	pandemonium_vector4 (*pandemonium_vector4_operator_add)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_b);
	pandemonium_vector4 (*pandemonium_vector4_operator_subtract)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_b);
	pandemonium_vector4 (*pandemonium_vector4_operator_multiply_vector)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_b);
	pandemonium_vector4 (*pandemonium_vector4_operator_multiply_scalar)(const pandemonium_vector4 *p_self, const pandemonium_real p_b);
	pandemonium_vector4 (*pandemonium_vector4_operator_divide_vector)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_b);
	pandemonium_vector4 (*pandemonium_vector4_operator_divide_scalar)(const pandemonium_vector4 *p_self, const pandemonium_real p_b);
	pandemonium_vector4 (*pandemonium_vector4_operator_neg)(const pandemonium_vector4 *p_self);
	pandemonium_bool (*pandemonium_vector4_operator_equal)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_b);
	pandemonium_bool (*pandemonium_vector4_operator_less)(const pandemonium_vector4 *p_self, const pandemonium_vector4 *p_b);
	pandemonium_string (*pandemonium_vector4_as_string)(const pandemonium_vector4 *p_self);
	void (*pandemonium_vector4_new)(pandemonium_vector4 *r_dest, const pandemonium_real p_x, const pandemonium_real p_y, const pandemonium_real p_z, const pandemonium_real p_w);
	pandemonium_int (*pandemonium_vector4i_get_x)(const pandemonium_vector4i *p_self);
	void (*pandemonium_vector4i_set_x)(pandemonium_vector4i *p_self, const pandemonium_int val);
	pandemonium_int (*pandemonium_vector4i_get_y)(const pandemonium_vector4i *p_self);
	void (*pandemonium_vector4i_set_y)(pandemonium_vector4i *p_self, const pandemonium_int val);
	pandemonium_int (*pandemonium_vector4i_get_z)(const pandemonium_vector4i *p_self);
	void (*pandemonium_vector4i_set_z)(pandemonium_vector4i *p_self, const pandemonium_int val);
	pandemonium_int (*pandemonium_vector4i_get_w)(const pandemonium_vector4i *p_self);
	void (*pandemonium_vector4i_set_w)(pandemonium_vector4i *p_self, const pandemonium_int val);
	pandemonium_int *(*pandemonium_vector4i_operator_index)(pandemonium_vector4i *p_self, const pandemonium_int p_idx);
	const pandemonium_int *(*pandemonium_vector4i_operator_index_const)(const pandemonium_vector4i *p_self, const pandemonium_int p_idx);
	void (*pandemonium_vector4i_set_axis)(pandemonium_vector4i *p_self, const pandemonium_vector4i_axis p_axis, const pandemonium_int p_val);
	pandemonium_int (*pandemonium_vector4i_get_axis)(const pandemonium_vector4i *p_self, const pandemonium_vector4i_axis p_axis);
	void (*pandemonium_vector4i_set_all)(pandemonium_vector4i *p_self, const pandemonium_int p_val);
	pandemonium_int (*pandemonium_vector4i_min_axis)(const pandemonium_vector4i *p_self);
	pandemonium_int (*pandemonium_vector4i_max_axis)(const pandemonium_vector4i *p_self);
	pandemonium_real (*pandemonium_vector4i_length)(const pandemonium_vector4i *p_self);
	pandemonium_int (*pandemonium_vector4i_length_squared)(const pandemonium_vector4i *p_self);
	void (*pandemonium_vector4i_zero)(pandemonium_vector4i *p_self);
	pandemonium_vector4i (*pandemonium_vector4i_linear_interpolate)(const pandemonium_vector4i *p_self, const pandemonium_vector4i *p_b, const pandemonium_real p_t);
	pandemonium_vector4i (*pandemonium_vector4i_abs)(const pandemonium_vector4i *p_self);
	pandemonium_vector4i (*pandemonium_vector4i_sign)(const pandemonium_vector4i *p_self);
	pandemonium_vector4i (*pandemonium_vector4i_clamp)(const pandemonium_vector4i *p_self, const pandemonium_vector4i *p_min, const pandemonium_vector4i *p_max);
	pandemonium_vector4i (*pandemonium_vector4i_operator_add)(const pandemonium_vector4i *p_self, const pandemonium_vector4i *p_b);
	pandemonium_vector4i (*pandemonium_vector4i_operator_subtract)(const pandemonium_vector4i *p_self, const pandemonium_vector4i *p_b);
	pandemonium_vector4i (*pandemonium_vector4i_operator_multiply_vector)(const pandemonium_vector4i *p_self, const pandemonium_vector4i *p_b);
	pandemonium_vector4i (*pandemonium_vector4i_operator_multiply_scalar)(const pandemonium_vector4i *p_self, const pandemonium_int p_b);
	pandemonium_vector4i (*pandemonium_vector4i_operator_divide_vector)(const pandemonium_vector4i *p_self, const pandemonium_vector4i *p_b);
	pandemonium_vector4i (*pandemonium_vector4i_operator_divide_scalar)(const pandemonium_vector4i *p_self, const pandemonium_int p_b);
	pandemonium_vector4i (*pandemonium_vector4i_operator_neg)(const pandemonium_vector4i *p_self);
	pandemonium_bool (*pandemonium_vector4i_operator_equal)(const pandemonium_vector4i *p_self, const pandemonium_vector4i *p_b);
	pandemonium_bool (*pandemonium_vector4i_operator_less)(const pandemonium_vector4i *p_self, const pandemonium_vector4i *p_b);
	pandemonium_vector4 (*pandemonium_vector4i_to_vector4)(const pandemonium_vector4i *p_self);
	pandemonium_string (*pandemonium_vector4i_as_string)(const pandemonium_vector4i *p_self);
	void (*pandemonium_vector4i_new)(pandemonium_vector4i *r_dest, const pandemonium_int p_x, const pandemonium_int p_y, const pandemonium_int p_z, const pandemonium_int p_w);
	pandemonium_pool_byte_array_read_access *(*pandemonium_pool_byte_array_read)(const pandemonium_pool_byte_array *p_self);
	pandemonium_pool_byte_array_write_access *(*pandemonium_pool_byte_array_write)(pandemonium_pool_byte_array *p_self);
	void (*pandemonium_pool_byte_array_remove)(pandemonium_pool_byte_array *p_self, const pandemonium_int p_idx);
	pandemonium_int (*pandemonium_pool_byte_array_size)(const pandemonium_pool_byte_array *p_self);
	pandemonium_bool (*pandemonium_pool_byte_array_empty)(const pandemonium_pool_byte_array *p_self);
	void (*pandemonium_pool_byte_array_set)(pandemonium_pool_byte_array *p_self, const pandemonium_int p_idx, const uint8_t p_data);
	uint8_t (*pandemonium_pool_byte_array_get)(const pandemonium_pool_byte_array *p_self, const pandemonium_int p_idx);
	void (*pandemonium_pool_byte_array_fill)(pandemonium_pool_byte_array *p_self, const pandemonium_int p_val);
	void (*pandemonium_pool_byte_array_push_back)(pandemonium_pool_byte_array *p_self, const uint8_t p_data);
	void (*pandemonium_pool_byte_array_append)(pandemonium_pool_byte_array *p_self, const uint8_t p_data);
	void (*pandemonium_pool_byte_array_append_array)(pandemonium_pool_byte_array *p_self, const pandemonium_pool_byte_array *p_array);
	pandemonium_pool_byte_array (*pandemonium_pool_byte_array_subarray)(const pandemonium_pool_byte_array *p_self, pandemonium_int p_from, pandemonium_int p_to);
	pandemonium_error (*pandemonium_pool_byte_array_insert)(pandemonium_pool_byte_array *p_self, const pandemonium_int p_idx, const uint8_t p_data);
	pandemonium_bool (*pandemonium_pool_byte_array_contains)(const pandemonium_pool_byte_array *p_self, const pandemonium_int p_val);
	pandemonium_int (*pandemonium_pool_byte_array_find)(const pandemonium_pool_byte_array *p_self, const pandemonium_int p_val);
	pandemonium_int (*pandemonium_pool_byte_array_find_from)(const pandemonium_pool_byte_array *p_self, const pandemonium_int p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_byte_array_rfind)(const pandemonium_pool_byte_array *p_self, const pandemonium_int p_val);
	pandemonium_int (*pandemonium_pool_byte_array_rfind_from)(const pandemonium_pool_byte_array *p_self, const pandemonium_int p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_byte_array_count)(const pandemonium_pool_byte_array *p_self, const pandemonium_int p_val);
	pandemonium_bool (*pandemonium_pool_byte_array_has)(const pandemonium_pool_byte_array *p_self, const uint8_t p_data);
	pandemonium_bool (*pandemonium_pool_byte_array_is_locked)(const pandemonium_pool_byte_array *p_self);
	void (*pandemonium_pool_byte_array_resize)(pandemonium_pool_byte_array *p_self, const pandemonium_int p_size);
	pandemonium_int (*pandemonium_pool_byte_array_clear)(pandemonium_pool_byte_array *p_self);
	void (*pandemonium_pool_byte_array_invert)(pandemonium_pool_byte_array *p_self);
	void (*pandemonium_pool_byte_array_sort)(pandemonium_pool_byte_array *p_self);
	void (*pandemonium_pool_byte_array_new)(pandemonium_pool_byte_array *r_dest);
	void (*pandemonium_pool_byte_array_new_copy)(pandemonium_pool_byte_array *r_dest, const pandemonium_pool_byte_array *p_src);
	void (*pandemonium_pool_byte_array_new_with_array)(pandemonium_pool_byte_array *r_dest, const pandemonium_array *p_a);
	void (*pandemonium_pool_byte_array_destroy)(pandemonium_pool_byte_array *p_self);
	pandemonium_pool_int_array_read_access *(*pandemonium_pool_int_array_read)(const pandemonium_pool_int_array *p_self);
	pandemonium_pool_int_array_write_access *(*pandemonium_pool_int_array_write)(pandemonium_pool_int_array *p_self);
	void (*pandemonium_pool_int_array_remove)(pandemonium_pool_int_array *p_self, const pandemonium_int p_idx);
	pandemonium_int (*pandemonium_pool_int_array_size)(const pandemonium_pool_int_array *p_self);
	pandemonium_bool (*pandemonium_pool_int_array_empty)(const pandemonium_pool_int_array *p_self);
	void (*pandemonium_pool_int_array_set)(pandemonium_pool_int_array *p_self, const pandemonium_int p_idx, const pandemonium_int p_data);
	pandemonium_int (*pandemonium_pool_int_array_get)(const pandemonium_pool_int_array *p_self, const pandemonium_int p_idx);
	void (*pandemonium_pool_int_array_fill)(pandemonium_pool_int_array *p_self, const pandemonium_int p_val);
	void (*pandemonium_pool_int_array_push_back)(pandemonium_pool_int_array *p_self, const pandemonium_int p_data);
	void (*pandemonium_pool_int_array_append)(pandemonium_pool_int_array *p_self, const pandemonium_int p_data);
	void (*pandemonium_pool_int_array_append_array)(pandemonium_pool_int_array *p_self, const pandemonium_pool_int_array *p_array);
	pandemonium_pool_int_array (*pandemonium_pool_int_array_subarray)(const pandemonium_pool_int_array *p_self, pandemonium_int p_from, pandemonium_int p_to);
	pandemonium_error (*pandemonium_pool_int_array_insert)(pandemonium_pool_int_array *p_self, const pandemonium_int p_idx, const pandemonium_int p_data);
	pandemonium_string (*pandemonium_pool_string_array_join)(const pandemonium_pool_string_array *p_self, const pandemonium_string *p_delimiter);
	pandemonium_bool (*pandemonium_pool_int_array_contains)(const pandemonium_pool_int_array *p_self, const pandemonium_int p_val);
	pandemonium_int (*pandemonium_pool_int_array_find)(const pandemonium_pool_int_array *p_self, const pandemonium_int p_val);
	pandemonium_int (*pandemonium_pool_int_array_find_from)(const pandemonium_pool_int_array *p_self, const pandemonium_int p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_int_array_rfind)(const pandemonium_pool_int_array *p_self, const pandemonium_int p_val);
	pandemonium_int (*pandemonium_pool_int_array_rfind_from)(const pandemonium_pool_int_array *p_self, const pandemonium_int p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_int_array_count)(const pandemonium_pool_int_array *p_self, const pandemonium_int p_val);
	pandemonium_bool (*pandemonium_pool_int_array_has)(const pandemonium_pool_int_array *p_self, const pandemonium_int p_data);
	pandemonium_bool (*pandemonium_pool_int_array_is_locked)(const pandemonium_pool_int_array *p_self);
	void (*pandemonium_pool_int_array_resize)(pandemonium_pool_int_array *p_self, const pandemonium_int p_size);
	pandemonium_int (*pandemonium_pool_int_array_clear)(pandemonium_pool_int_array *p_self);
	void (*pandemonium_pool_int_array_invert)(pandemonium_pool_int_array *p_self);
	void (*pandemonium_pool_int_array_sort)(pandemonium_pool_int_array *p_self);
	void (*pandemonium_pool_int_array_new)(pandemonium_pool_int_array *r_dest);
	void (*pandemonium_pool_int_array_new_copy)(pandemonium_pool_int_array *r_dest, const pandemonium_pool_int_array *p_src);
	void (*pandemonium_pool_int_array_new_with_array)(pandemonium_pool_int_array *r_dest, const pandemonium_array *p_a);
	void (*pandemonium_pool_int_array_destroy)(pandemonium_pool_int_array *p_self);
	pandemonium_pool_real_array_read_access *(*pandemonium_pool_real_array_read)(const pandemonium_pool_real_array *p_self);
	pandemonium_pool_real_array_write_access *(*pandemonium_pool_real_array_write)(pandemonium_pool_real_array *p_self);
	void (*pandemonium_pool_real_array_remove)(pandemonium_pool_real_array *p_self, const pandemonium_int p_idx);
	pandemonium_int (*pandemonium_pool_real_array_size)(const pandemonium_pool_real_array *p_self);
	pandemonium_bool (*pandemonium_pool_real_array_empty)(const pandemonium_pool_real_array *p_self);
	void (*pandemonium_pool_real_array_set)(pandemonium_pool_real_array *p_self, const pandemonium_int p_idx, const pandemonium_real p_data);
	pandemonium_real (*pandemonium_pool_real_array_get)(const pandemonium_pool_real_array *p_self, const pandemonium_int p_idx);
	void (*pandemonium_pool_real_array_fill)(pandemonium_pool_real_array *p_self, const pandemonium_real p_val);
	void (*pandemonium_pool_real_array_push_back)(pandemonium_pool_real_array *p_self, const pandemonium_real p_data);
	void (*pandemonium_pool_real_array_append)(pandemonium_pool_real_array *p_self, const pandemonium_real p_data);
	void (*pandemonium_pool_real_array_append_array)(pandemonium_pool_real_array *p_self, const pandemonium_pool_real_array *p_array);
	pandemonium_pool_real_array (*pandemonium_pool_real_array_subarray)(const pandemonium_pool_real_array *p_self, pandemonium_int p_from, pandemonium_int p_to);
	pandemonium_error (*pandemonium_pool_real_array_insert)(pandemonium_pool_real_array *p_self, const pandemonium_int p_idx, const pandemonium_real p_data);
	pandemonium_bool (*pandemonium_pool_real_array_contains)(const pandemonium_pool_real_array *p_self, const pandemonium_real p_val);
	pandemonium_int (*pandemonium_pool_real_array_find)(const pandemonium_pool_real_array *p_self, const pandemonium_real p_val);
	pandemonium_int (*pandemonium_pool_real_array_find_from)(const pandemonium_pool_real_array *p_self, const pandemonium_real p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_real_array_rfind)(const pandemonium_pool_real_array *p_self, const pandemonium_real p_val);
	pandemonium_int (*pandemonium_pool_real_array_rfind_from)(const pandemonium_pool_real_array *p_self, const pandemonium_real p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_real_array_count)(const pandemonium_pool_real_array *p_self, const pandemonium_real p_val);
	pandemonium_bool (*pandemonium_pool_real_array_has)(const pandemonium_pool_real_array *p_self, const pandemonium_real p_data);
	pandemonium_bool (*pandemonium_pool_real_array_is_locked)(const pandemonium_pool_real_array *p_self);
	void (*pandemonium_pool_real_array_resize)(pandemonium_pool_real_array *p_self, const pandemonium_int p_size);
	pandemonium_int (*pandemonium_pool_real_array_clear)(pandemonium_pool_real_array *p_self);
	void (*pandemonium_pool_real_array_invert)(pandemonium_pool_real_array *p_self);
	void (*pandemonium_pool_real_array_sort)(pandemonium_pool_real_array *p_self);
	void (*pandemonium_pool_real_array_new)(pandemonium_pool_real_array *r_dest);
	void (*pandemonium_pool_real_array_new_copy)(pandemonium_pool_real_array *r_dest, const pandemonium_pool_real_array *p_src);
	void (*pandemonium_pool_real_array_new_with_array)(pandemonium_pool_real_array *r_dest, const pandemonium_array *p_a);
	void (*pandemonium_pool_real_array_destroy)(pandemonium_pool_real_array *p_self);
	pandemonium_pool_string_array_read_access *(*pandemonium_pool_string_array_read)(const pandemonium_pool_string_array *p_self);
	pandemonium_pool_string_array_write_access *(*pandemonium_pool_string_array_write)(pandemonium_pool_string_array *p_self);
	void (*pandemonium_pool_string_array_remove)(pandemonium_pool_string_array *p_self, const pandemonium_int p_idx);
	pandemonium_int (*pandemonium_pool_string_array_size)(const pandemonium_pool_string_array *p_self);
	pandemonium_bool (*pandemonium_pool_string_array_empty)(const pandemonium_pool_string_array *p_self);
	void (*pandemonium_pool_string_array_set)(pandemonium_pool_string_array *p_self, const pandemonium_int p_idx, const pandemonium_string *p_data);
	pandemonium_string (*pandemonium_pool_string_array_get)(const pandemonium_pool_string_array *p_self, const pandemonium_int p_idx);
	void (*pandemonium_pool_string_array_fill)(pandemonium_pool_string_array *p_self, const pandemonium_string *p_val);
	void (*pandemonium_pool_string_array_push_back)(pandemonium_pool_string_array *p_self, const pandemonium_string *p_data);
	void (*pandemonium_pool_string_array_append)(pandemonium_pool_string_array *p_self, const pandemonium_string *p_data);
	void (*pandemonium_pool_string_array_append_array)(pandemonium_pool_string_array *p_self, const pandemonium_pool_string_array *p_array);
	pandemonium_pool_string_array (*pandemonium_pool_string_array_subarray)(const pandemonium_pool_string_array *p_self, pandemonium_int p_from, pandemonium_int p_to);
	pandemonium_error (*pandemonium_pool_string_array_insert)(pandemonium_pool_string_array *p_self, const pandemonium_int p_idx, const pandemonium_string *p_data);
	pandemonium_bool (*pandemonium_pool_string_array_contains)(const pandemonium_pool_string_array *p_self, const pandemonium_string *p_val);
	pandemonium_int (*pandemonium_pool_string_array_find)(const pandemonium_pool_string_array *p_self, const pandemonium_string *p_val);
	pandemonium_int (*pandemonium_pool_string_array_find_from)(const pandemonium_pool_string_array *p_self, const pandemonium_string *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_string_array_rfind)(const pandemonium_pool_string_array *p_self, const pandemonium_string *p_val);
	pandemonium_int (*pandemonium_pool_string_array_rfind_from)(const pandemonium_pool_string_array *p_self, const pandemonium_string *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_string_array_count)(const pandemonium_pool_string_array *p_self, const pandemonium_string *p_val);
	pandemonium_bool (*pandemonium_pool_string_array_has)(const pandemonium_pool_string_array *p_self, const pandemonium_string *p_data);
	pandemonium_bool (*pandemonium_pool_string_array_is_locked)(const pandemonium_pool_string_array *p_self);
	void (*pandemonium_pool_string_array_resize)(pandemonium_pool_string_array *p_self, const pandemonium_int p_size);
	pandemonium_int (*pandemonium_pool_string_array_clear)(pandemonium_pool_string_array *p_self);
	void (*pandemonium_pool_string_array_invert)(pandemonium_pool_string_array *p_self);
	void (*pandemonium_pool_string_array_sort)(pandemonium_pool_string_array *p_self);
	void (*pandemonium_pool_string_array_new)(pandemonium_pool_string_array *r_dest);
	void (*pandemonium_pool_string_array_new_copy)(pandemonium_pool_string_array *r_dest, const pandemonium_pool_string_array *p_src);
	void (*pandemonium_pool_string_array_new_with_array)(pandemonium_pool_string_array *r_dest, const pandemonium_array *p_a);
	void (*pandemonium_pool_string_array_destroy)(pandemonium_pool_string_array *p_self);
	pandemonium_pool_vector2_array_read_access *(*pandemonium_pool_vector2_array_read)(const pandemonium_pool_vector2_array *p_self);
	pandemonium_pool_vector2_array_write_access *(*pandemonium_pool_vector2_array_write)(pandemonium_pool_vector2_array *p_self);
	void (*pandemonium_pool_vector2_array_remove)(pandemonium_pool_vector2_array *p_self, const pandemonium_int p_idx);
	pandemonium_int (*pandemonium_pool_vector2_array_size)(const pandemonium_pool_vector2_array *p_self);
	pandemonium_bool (*pandemonium_pool_vector2_array_empty)(const pandemonium_pool_vector2_array *p_self);
	void (*pandemonium_pool_vector2_array_set)(pandemonium_pool_vector2_array *p_self, const pandemonium_int p_idx, const pandemonium_vector2 *p_data);
	pandemonium_vector2 (*pandemonium_pool_vector2_array_get)(const pandemonium_pool_vector2_array *p_self, const pandemonium_int p_idx);
	void (*pandemonium_pool_vector2_array_fill)(pandemonium_pool_vector2_array *p_self, const pandemonium_vector2 *p_val);
	void (*pandemonium_pool_vector2_array_push_back)(pandemonium_pool_vector2_array *p_self, const pandemonium_vector2 *p_data);
	void (*pandemonium_pool_vector2_array_append)(pandemonium_pool_vector2_array *p_self, const pandemonium_vector2 *p_data);
	void (*pandemonium_pool_vector2_array_append_array)(pandemonium_pool_vector2_array *p_self, const pandemonium_pool_vector2_array *p_array);
	pandemonium_pool_vector2_array (*pandemonium_pool_vector2_array_subarray)(const pandemonium_pool_vector2_array *p_self, pandemonium_int p_from, pandemonium_int p_to);
	pandemonium_error (*pandemonium_pool_vector2_array_insert)(pandemonium_pool_vector2_array *p_self, const pandemonium_int p_idx, const pandemonium_vector2 *p_data);
	pandemonium_bool (*pandemonium_pool_vector2_array_contains)(const pandemonium_pool_vector2_array *p_self, const pandemonium_vector2 *p_val);
	pandemonium_int (*pandemonium_pool_vector2_array_find)(const pandemonium_pool_vector2_array *p_self, const pandemonium_vector2 *p_val);
	pandemonium_int (*pandemonium_pool_vector2_array_find_from)(const pandemonium_pool_vector2_array *p_self, const pandemonium_vector2 *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_vector2_array_rfind)(const pandemonium_pool_vector2_array *p_self, const pandemonium_vector2 *p_val);
	pandemonium_int (*pandemonium_pool_vector2_array_rfind_from)(const pandemonium_pool_vector2_array *p_self, const pandemonium_vector2 *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_vector2_array_count)(const pandemonium_pool_vector2_array *p_self, const pandemonium_vector2 *p_val);
	pandemonium_bool (*pandemonium_pool_vector2_array_has)(const pandemonium_pool_vector2_array *p_self, const pandemonium_vector2 *p_data);
	pandemonium_bool (*pandemonium_pool_vector2_array_is_locked)(const pandemonium_pool_vector2_array *p_self);
	void (*pandemonium_pool_vector2_array_resize)(pandemonium_pool_vector2_array *p_self, const pandemonium_int p_size);
	pandemonium_int (*pandemonium_pool_vector2_array_clear)(pandemonium_pool_vector2_array *p_self);
	void (*pandemonium_pool_vector2_array_invert)(pandemonium_pool_vector2_array *p_self);
	void (*pandemonium_pool_vector2_array_sort)(pandemonium_pool_vector2_array *p_self);
	void (*pandemonium_pool_vector2_array_new)(pandemonium_pool_vector2_array *r_dest);
	void (*pandemonium_pool_vector2_array_new_copy)(pandemonium_pool_vector2_array *r_dest, const pandemonium_pool_vector2_array *p_src);
	void (*pandemonium_pool_vector2_array_new_with_array)(pandemonium_pool_vector2_array *r_dest, const pandemonium_array *p_a);
	void (*pandemonium_pool_vector2_array_destroy)(pandemonium_pool_vector2_array *p_self);
	pandemonium_pool_vector2i_array_read_access *(*pandemonium_pool_vector2i_array_read)(const pandemonium_pool_vector2i_array *p_self);
	pandemonium_pool_vector2i_array_write_access *(*pandemonium_pool_vector2i_array_write)(pandemonium_pool_vector2i_array *p_self);
	void (*pandemonium_pool_vector2i_array_remove)(pandemonium_pool_vector2i_array *p_self, const pandemonium_int p_idx);
	pandemonium_int (*pandemonium_pool_vector2i_array_size)(const pandemonium_pool_vector2i_array *p_self);
	pandemonium_bool (*pandemonium_pool_vector2i_array_empty)(const pandemonium_pool_vector2i_array *p_self);
	void (*pandemonium_pool_vector2i_array_set)(pandemonium_pool_vector2i_array *p_self, const pandemonium_int p_idx, const pandemonium_vector2i *p_data);
	pandemonium_vector2i (*pandemonium_pool_vector2i_array_get)(const pandemonium_pool_vector2i_array *p_self, const pandemonium_int p_idx);
	void (*pandemonium_pool_vector2i_array_fill)(pandemonium_pool_vector2i_array *p_self, const pandemonium_vector2i *p_val);
	void (*pandemonium_pool_vector2i_array_push_back)(pandemonium_pool_vector2i_array *p_self, const pandemonium_vector2i *p_data);
	void (*pandemonium_pool_vector2i_array_append)(pandemonium_pool_vector2i_array *p_self, const pandemonium_vector2i *p_data);
	void (*pandemonium_pool_vector2i_array_append_array)(pandemonium_pool_vector2i_array *p_self, const pandemonium_pool_vector2i_array *p_array);
	pandemonium_pool_vector2i_array (*pandemonium_pool_vector2i_array_subarray)(const pandemonium_pool_vector2i_array *p_self, pandemonium_int p_from, pandemonium_int p_to);
	pandemonium_error (*pandemonium_pool_vector2i_array_insert)(pandemonium_pool_vector2i_array *p_self, const pandemonium_int p_idx, const pandemonium_vector2i *p_data);
	pandemonium_bool (*pandemonium_pool_vector2i_array_contains)(const pandemonium_pool_vector2i_array *p_self, const pandemonium_vector2i *p_val);
	pandemonium_int (*pandemonium_pool_vector2i_array_find)(const pandemonium_pool_vector2i_array *p_self, const pandemonium_vector2i *p_val);
	pandemonium_int (*pandemonium_pool_vector2i_array_find_from)(const pandemonium_pool_vector2i_array *p_self, const pandemonium_vector2i *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_vector2i_array_rfind)(const pandemonium_pool_vector2i_array *p_self, const pandemonium_vector2i *p_val);
	pandemonium_int (*pandemonium_pool_vector2i_array_rfind_from)(const pandemonium_pool_vector2i_array *p_self, const pandemonium_vector2i *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_vector2i_array_count)(const pandemonium_pool_vector2i_array *p_self, const pandemonium_vector2i *p_val);
	pandemonium_bool (*pandemonium_pool_vector2i_array_has)(const pandemonium_pool_vector2i_array *p_self, const pandemonium_vector2i *p_data);
	pandemonium_bool (*pandemonium_pool_vector2i_array_is_locked)(const pandemonium_pool_vector2i_array *p_self);
	void (*pandemonium_pool_vector2i_array_resize)(pandemonium_pool_vector2i_array *p_self, const pandemonium_int p_size);
	pandemonium_int (*pandemonium_pool_vector2i_array_clear)(pandemonium_pool_vector2i_array *p_self);
	void (*pandemonium_pool_vector2i_array_invert)(pandemonium_pool_vector2i_array *p_self);
	void (*pandemonium_pool_vector2i_array_sort)(pandemonium_pool_vector2i_array *p_self);
	void (*pandemonium_pool_vector2i_array_new)(pandemonium_pool_vector2i_array *r_dest);
	void (*pandemonium_pool_vector2i_array_new_copy)(pandemonium_pool_vector2i_array *r_dest, const pandemonium_pool_vector2i_array *p_src);
	void (*pandemonium_pool_vector2i_array_new_with_array)(pandemonium_pool_vector2i_array *r_dest, const pandemonium_array *p_a);
	void (*pandemonium_pool_vector2i_array_destroy)(pandemonium_pool_vector2i_array *p_self);
	pandemonium_pool_vector3_array_read_access *(*pandemonium_pool_vector3_array_read)(const pandemonium_pool_vector3_array *p_self);
	pandemonium_pool_vector3_array_write_access *(*pandemonium_pool_vector3_array_write)(pandemonium_pool_vector3_array *p_self);
	void (*pandemonium_pool_vector3_array_remove)(pandemonium_pool_vector3_array *p_self, const pandemonium_int p_idx);
	pandemonium_int (*pandemonium_pool_vector3_array_size)(const pandemonium_pool_vector3_array *p_self);
	pandemonium_bool (*pandemonium_pool_vector3_array_empty)(const pandemonium_pool_vector3_array *p_self);
	void (*pandemonium_pool_vector3_array_set)(pandemonium_pool_vector3_array *p_self, const pandemonium_int p_idx, const pandemonium_vector3 *p_data);
	pandemonium_vector3 (*pandemonium_pool_vector3_array_get)(const pandemonium_pool_vector3_array *p_self, const pandemonium_int p_idx);
	void (*pandemonium_pool_vector3_array_fill)(pandemonium_pool_vector3_array *p_self, const pandemonium_vector3 *p_val);
	void (*pandemonium_pool_vector3_array_push_back)(pandemonium_pool_vector3_array *p_self, const pandemonium_vector3 *p_data);
	void (*pandemonium_pool_vector3_array_append)(pandemonium_pool_vector3_array *p_self, const pandemonium_vector3 *p_data);
	void (*pandemonium_pool_vector3_array_append_array)(pandemonium_pool_vector3_array *p_self, const pandemonium_pool_vector3_array *p_array);
	pandemonium_pool_vector3_array (*pandemonium_pool_vector3_array_subarray)(const pandemonium_pool_vector3_array *p_self, pandemonium_int p_from, pandemonium_int p_to);
	pandemonium_error (*pandemonium_pool_vector3_array_insert)(pandemonium_pool_vector3_array *p_self, const pandemonium_int p_idx, const pandemonium_vector3 *p_data);
	pandemonium_bool (*pandemonium_pool_vector3_array_contains)(const pandemonium_pool_vector3_array *p_self, const pandemonium_vector3 *p_val);
	pandemonium_int (*pandemonium_pool_vector3_array_find)(const pandemonium_pool_vector3_array *p_self, const pandemonium_vector3 *p_val);
	pandemonium_int (*pandemonium_pool_vector3_array_find_from)(const pandemonium_pool_vector3_array *p_self, const pandemonium_vector3 *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_vector3_array_rfind)(const pandemonium_pool_vector3_array *p_self, const pandemonium_vector3 *p_val);
	pandemonium_int (*pandemonium_pool_vector3_array_rfind_from)(const pandemonium_pool_vector3_array *p_self, const pandemonium_vector3 *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_vector3_array_count)(const pandemonium_pool_vector3_array *p_self, const pandemonium_vector3 *p_val);
	pandemonium_bool (*pandemonium_pool_vector3_array_has)(const pandemonium_pool_vector3_array *p_self, const pandemonium_vector3 *p_data);
	pandemonium_bool (*pandemonium_pool_vector3_array_is_locked)(const pandemonium_pool_vector3_array *p_self);
	void (*pandemonium_pool_vector3_array_resize)(pandemonium_pool_vector3_array *p_self, const pandemonium_int p_size);
	pandemonium_int (*pandemonium_pool_vector3_array_clear)(pandemonium_pool_vector3_array *p_self);
	void (*pandemonium_pool_vector3_array_invert)(pandemonium_pool_vector3_array *p_self);
	void (*pandemonium_pool_vector3_array_sort)(pandemonium_pool_vector3_array *p_self);
	void (*pandemonium_pool_vector3_array_new)(pandemonium_pool_vector3_array *r_dest);
	void (*pandemonium_pool_vector3_array_new_copy)(pandemonium_pool_vector3_array *r_dest, const pandemonium_pool_vector3_array *p_src);
	void (*pandemonium_pool_vector3_array_new_with_array)(pandemonium_pool_vector3_array *r_dest, const pandemonium_array *p_a);
	void (*pandemonium_pool_vector3_array_destroy)(pandemonium_pool_vector3_array *p_self);
	pandemonium_pool_vector3i_array_read_access *(*pandemonium_pool_vector3i_array_read)(const pandemonium_pool_vector3i_array *p_self);
	pandemonium_pool_vector3i_array_write_access *(*pandemonium_pool_vector3i_array_write)(pandemonium_pool_vector3i_array *p_self);
	void (*pandemonium_pool_vector3i_array_remove)(pandemonium_pool_vector3i_array *p_self, const pandemonium_int p_idx);
	pandemonium_int (*pandemonium_pool_vector3i_array_size)(const pandemonium_pool_vector3i_array *p_self);
	pandemonium_bool (*pandemonium_pool_vector3i_array_empty)(const pandemonium_pool_vector3i_array *p_self);
	void (*pandemonium_pool_vector3i_array_set)(pandemonium_pool_vector3i_array *p_self, const pandemonium_int p_idx, const pandemonium_vector3i *p_data);
	pandemonium_vector3i (*pandemonium_pool_vector3i_array_get)(const pandemonium_pool_vector3i_array *p_self, const pandemonium_int p_idx);
	void (*pandemonium_pool_vector3i_array_fill)(pandemonium_pool_vector3i_array *p_self, const pandemonium_vector3i *p_val);
	void (*pandemonium_pool_vector3i_array_push_back)(pandemonium_pool_vector3i_array *p_self, const pandemonium_vector3i *p_data);
	void (*pandemonium_pool_vector3i_array_append)(pandemonium_pool_vector3i_array *p_self, const pandemonium_vector3i *p_data);
	void (*pandemonium_pool_vector3i_array_append_array)(pandemonium_pool_vector3i_array *p_self, const pandemonium_pool_vector3i_array *p_array);
	pandemonium_pool_vector3i_array (*pandemonium_pool_vector3i_array_subarray)(const pandemonium_pool_vector3i_array *p_self, pandemonium_int p_from, pandemonium_int p_to);
	pandemonium_error (*pandemonium_pool_vector3i_array_insert)(pandemonium_pool_vector3i_array *p_self, const pandemonium_int p_idx, const pandemonium_vector3i *p_data);
	pandemonium_bool (*pandemonium_pool_vector3i_array_contains)(const pandemonium_pool_vector3i_array *p_self, const pandemonium_vector3i *p_val);
	pandemonium_int (*pandemonium_pool_vector3i_array_find)(const pandemonium_pool_vector3i_array *p_self, const pandemonium_vector3i *p_val);
	pandemonium_int (*pandemonium_pool_vector3i_array_find_from)(const pandemonium_pool_vector3i_array *p_self, const pandemonium_vector3i *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_vector3i_array_rfind)(const pandemonium_pool_vector3i_array *p_self, const pandemonium_vector3i *p_val);
	pandemonium_int (*pandemonium_pool_vector3i_array_rfind_from)(const pandemonium_pool_vector3i_array *p_self, const pandemonium_vector3i *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_vector3i_array_count)(const pandemonium_pool_vector3i_array *p_self, const pandemonium_vector3i *p_val);
	pandemonium_bool (*pandemonium_pool_vector3i_array_has)(const pandemonium_pool_vector3i_array *p_self, const pandemonium_vector3i *p_data);
	pandemonium_bool (*pandemonium_pool_vector3i_array_is_locked)(const pandemonium_pool_vector3i_array *p_self);
	void (*pandemonium_pool_vector3i_array_resize)(pandemonium_pool_vector3i_array *p_self, const pandemonium_int p_size);
	pandemonium_int (*pandemonium_pool_vector3i_array_clear)(pandemonium_pool_vector3i_array *p_self);
	void (*pandemonium_pool_vector3i_array_invert)(pandemonium_pool_vector3i_array *p_self);
	void (*pandemonium_pool_vector3i_array_sort)(pandemonium_pool_vector3i_array *p_self);
	void (*pandemonium_pool_vector3i_array_new)(pandemonium_pool_vector3i_array *r_dest);
	void (*pandemonium_pool_vector3i_array_new_copy)(pandemonium_pool_vector3i_array *r_dest, const pandemonium_pool_vector3i_array *p_src);
	void (*pandemonium_pool_vector3i_array_new_with_array)(pandemonium_pool_vector3i_array *r_dest, const pandemonium_array *p_a);
	void (*pandemonium_pool_vector3i_array_destroy)(pandemonium_pool_vector3i_array *p_self);
	pandemonium_pool_vector4_array_read_access *(*pandemonium_pool_vector4_array_read)(const pandemonium_pool_vector4_array *p_self);
	pandemonium_pool_vector4_array_write_access *(*pandemonium_pool_vector4_array_write)(pandemonium_pool_vector4_array *p_self);
	void (*pandemonium_pool_vector4_array_remove)(pandemonium_pool_vector4_array *p_self, const pandemonium_int p_idx);
	pandemonium_int (*pandemonium_pool_vector4_array_size)(const pandemonium_pool_vector4_array *p_self);
	pandemonium_bool (*pandemonium_pool_vector4_array_empty)(const pandemonium_pool_vector4_array *p_self);
	void (*pandemonium_pool_vector4_array_set)(pandemonium_pool_vector4_array *p_self, const pandemonium_int p_idx, const pandemonium_vector4 *p_data);
	pandemonium_vector4 (*pandemonium_pool_vector4_array_get)(const pandemonium_pool_vector4_array *p_self, const pandemonium_int p_idx);
	void (*pandemonium_pool_vector4_array_fill)(pandemonium_pool_vector4_array *p_self, const pandemonium_vector4 *p_val);
	void (*pandemonium_pool_vector4_array_push_back)(pandemonium_pool_vector4_array *p_self, const pandemonium_vector4 *p_data);
	void (*pandemonium_pool_vector4_array_append)(pandemonium_pool_vector4_array *p_self, const pandemonium_vector4 *p_data);
	void (*pandemonium_pool_vector4_array_append_array)(pandemonium_pool_vector4_array *p_self, const pandemonium_pool_vector4_array *p_array);
	pandemonium_pool_vector4_array (*pandemonium_pool_vector4_array_subarray)(const pandemonium_pool_vector4_array *p_self, pandemonium_int p_from, pandemonium_int p_to);
	pandemonium_error (*pandemonium_pool_vector4_array_insert)(pandemonium_pool_vector4_array *p_self, const pandemonium_int p_idx, const pandemonium_vector4 *p_data);
	pandemonium_bool (*pandemonium_pool_vector4_array_contains)(const pandemonium_pool_vector4_array *p_self, const pandemonium_vector4 *p_val);
	pandemonium_int (*pandemonium_pool_vector4_array_find)(const pandemonium_pool_vector4_array *p_self, const pandemonium_vector4 *p_val);
	pandemonium_int (*pandemonium_pool_vector4_array_find_from)(const pandemonium_pool_vector4_array *p_self, const pandemonium_vector4 *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_vector4_array_rfind)(const pandemonium_pool_vector4_array *p_self, const pandemonium_vector4 *p_val);
	pandemonium_int (*pandemonium_pool_vector4_array_rfind_from)(const pandemonium_pool_vector4_array *p_self, const pandemonium_vector4 *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_vector4_array_count)(const pandemonium_pool_vector4_array *p_self, const pandemonium_vector4 *p_val);
	pandemonium_bool (*pandemonium_pool_vector4_array_has)(const pandemonium_pool_vector4_array *p_self, const pandemonium_vector4 *p_data);
	pandemonium_bool (*pandemonium_pool_vector4_array_is_locked)(const pandemonium_pool_vector4_array *p_self);
	void (*pandemonium_pool_vector4_array_resize)(pandemonium_pool_vector4_array *p_self, const pandemonium_int p_size);
	pandemonium_int (*pandemonium_pool_vector4_array_clear)(pandemonium_pool_vector4_array *p_self);
	void (*pandemonium_pool_vector4_array_invert)(pandemonium_pool_vector4_array *p_self);
	void (*pandemonium_pool_vector4_array_sort)(pandemonium_pool_vector4_array *p_self);
	void (*pandemonium_pool_vector4_array_new)(pandemonium_pool_vector4_array *r_dest);
	void (*pandemonium_pool_vector4_array_new_copy)(pandemonium_pool_vector4_array *r_dest, const pandemonium_pool_vector4_array *p_src);
	void (*pandemonium_pool_vector4_array_new_with_array)(pandemonium_pool_vector4_array *r_dest, const pandemonium_array *p_a);
	void (*pandemonium_pool_vector4_array_destroy)(pandemonium_pool_vector4_array *p_self);
	pandemonium_pool_vector4i_array_read_access *(*pandemonium_pool_vector4i_array_read)(const pandemonium_pool_vector4i_array *p_self);
	pandemonium_pool_vector4i_array_write_access *(*pandemonium_pool_vector4i_array_write)(pandemonium_pool_vector4i_array *p_self);
	void (*pandemonium_pool_vector4i_array_remove)(pandemonium_pool_vector4i_array *p_self, const pandemonium_int p_idx);
	pandemonium_int (*pandemonium_pool_vector4i_array_size)(const pandemonium_pool_vector4i_array *p_self);
	pandemonium_bool (*pandemonium_pool_vector4i_array_empty)(const pandemonium_pool_vector4i_array *p_self);
	void (*pandemonium_pool_vector4i_array_set)(pandemonium_pool_vector4i_array *p_self, const pandemonium_int p_idx, const pandemonium_vector4i *p_data);
	pandemonium_vector4i (*pandemonium_pool_vector4i_array_get)(const pandemonium_pool_vector4i_array *p_self, const pandemonium_int p_idx);
	void (*pandemonium_pool_vector4i_array_fill)(pandemonium_pool_vector4i_array *p_self, const pandemonium_vector4i *p_val);
	void (*pandemonium_pool_vector4i_array_push_back)(pandemonium_pool_vector4i_array *p_self, const pandemonium_vector4i *p_data);
	void (*pandemonium_pool_vector4i_array_append)(pandemonium_pool_vector4i_array *p_self, const pandemonium_vector4i *p_data);
	void (*pandemonium_pool_vector4i_array_append_array)(pandemonium_pool_vector4i_array *p_self, const pandemonium_pool_vector4i_array *p_array);
	pandemonium_pool_vector4i_array (*pandemonium_pool_vector4i_array_subarray)(const pandemonium_pool_vector4i_array *p_self, pandemonium_int p_from, pandemonium_int p_to);
	pandemonium_error (*pandemonium_pool_vector4i_array_insert)(pandemonium_pool_vector4i_array *p_self, const pandemonium_int p_idx, const pandemonium_vector4i *p_data);
	pandemonium_bool (*pandemonium_pool_vector4i_array_contains)(const pandemonium_pool_vector4i_array *p_self, const pandemonium_vector4i *p_val);
	pandemonium_int (*pandemonium_pool_vector4i_array_find)(const pandemonium_pool_vector4i_array *p_self, const pandemonium_vector4i *p_val);
	pandemonium_int (*pandemonium_pool_vector4i_array_find_from)(const pandemonium_pool_vector4i_array *p_self, const pandemonium_vector4i *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_vector4i_array_rfind)(const pandemonium_pool_vector4i_array *p_self, const pandemonium_vector4i *p_val);
	pandemonium_int (*pandemonium_pool_vector4i_array_rfind_from)(const pandemonium_pool_vector4i_array *p_self, const pandemonium_vector4i *p_val, pandemonium_int p_from);
	pandemonium_int (*pandemonium_pool_vector4i_array_count)(const pandemonium_pool_vector4i_array *p_self, const pandemonium_vector4i *p_val);
	pandemonium_bool (*pandemonium_pool_vector4i_array_has)(const pandemonium_pool_vector4i_array *p_self, const pandemonium_vector4i *p_data);
	pandemonium_bool (*pandemonium_pool_vector4i_array_is_locked)(const pandemonium_pool_vector4i_array *p_self);
	void (*pandemonium_pool_vector4i_array_resize)(pandemonium_pool_vector4i_array *p_self, const pandemonium_int p_size);
	pandemonium_int (*pandemonium_pool_vector4i_array_clear)(pandemonium_pool_vector4i_array *p_self);
	void (*pandemonium_pool_vector4i_array_invert)(pandemonium_pool_vector4i_array *p_self);
	void (*pandemonium_pool_vector4i_array_sort)(pandemonium_pool_vector4i_array *p_self);
	void (*pandemonium_pool_vector4i_array_new)(pandemonium_pool_vector4i_array *r_dest);
	void (*pandemonium_pool_vector4i_array_new_copy)(pandemonium_pool_vector4i_array *r_dest, const pandemonium_pool_vector4i_array *p_src);
	void (*pandemonium_pool_vector4i_array_new_with_array)(pandemonium_pool_vector4i_array *r_dest, const pandemonium_array *p_a);
	void (*pandemonium_pool_vector4i_array_destroy)(pandemonium_pool_vector4i_array *p_self);
	void (*pandemonium_pool_color_array_new)(pandemonium_pool_color_array *r_dest);
	void (*pandemonium_pool_color_array_new_copy)(pandemonium_pool_color_array *r_dest, const pandemonium_pool_color_array *p_src);
	void (*pandemonium_pool_color_array_new_with_array)(pandemonium_pool_color_array *r_dest, const pandemonium_array *p_a);
	void (*pandemonium_pool_color_array_append)(pandemonium_pool_color_array *p_self, const pandemonium_color *p_data);
	void (*pandemonium_pool_color_array_append_array)(pandemonium_pool_color_array *p_self, const pandemonium_pool_color_array *p_array);
	pandemonium_error (*pandemonium_pool_color_array_insert)(pandemonium_pool_color_array *p_self, const pandemonium_int p_idx, const pandemonium_color *p_data);
	void (*pandemonium_pool_color_array_invert)(pandemonium_pool_color_array *p_self);
	void (*pandemonium_pool_color_array_push_back)(pandemonium_pool_color_array *p_self, const pandemonium_color *p_data);
	void (*pandemonium_pool_color_array_remove)(pandemonium_pool_color_array *p_self, const pandemonium_int p_idx);
	void (*pandemonium_pool_color_array_resize)(pandemonium_pool_color_array *p_self, const pandemonium_int p_size);
	void (*pandemonium_pool_color_array_sort)(pandemonium_pool_color_array *p_self);
	pandemonium_pool_color_array_read_access *(*pandemonium_pool_color_array_read)(const pandemonium_pool_color_array *p_self);
	pandemonium_pool_color_array_write_access *(*pandemonium_pool_color_array_write)(pandemonium_pool_color_array *p_self);
	void (*pandemonium_pool_color_array_set)(pandemonium_pool_color_array *p_self, const pandemonium_int p_idx, const pandemonium_color *p_data);
	pandemonium_color (*pandemonium_pool_color_array_get)(const pandemonium_pool_color_array *p_self, const pandemonium_int p_idx);
	pandemonium_int (*pandemonium_pool_color_array_size)(const pandemonium_pool_color_array *p_self);
	pandemonium_bool (*pandemonium_pool_color_array_empty)(const pandemonium_pool_color_array *p_self);
	pandemonium_bool (*pandemonium_pool_color_array_has)(const pandemonium_pool_color_array *p_self, const pandemonium_color *p_data);
	void (*pandemonium_pool_color_array_destroy)(pandemonium_pool_color_array *p_self);
	pandemonium_pool_byte_array_read_access *(*pandemonium_pool_byte_array_read_access_copy)(const pandemonium_pool_byte_array_read_access *p_other);
	const uint8_t *(*pandemonium_pool_byte_array_read_access_ptr)(const pandemonium_pool_byte_array_read_access *p_read);
	void (*pandemonium_pool_byte_array_read_access_operator_assign)(pandemonium_pool_byte_array_read_access *p_read, pandemonium_pool_byte_array_read_access *p_other);
	void (*pandemonium_pool_byte_array_read_access_destroy)(pandemonium_pool_byte_array_read_access *p_read);
	pandemonium_pool_int_array_read_access *(*pandemonium_pool_int_array_read_access_copy)(const pandemonium_pool_int_array_read_access *p_other);
	const pandemonium_int *(*pandemonium_pool_int_array_read_access_ptr)(const pandemonium_pool_int_array_read_access *p_read);
	void (*pandemonium_pool_int_array_read_access_operator_assign)(pandemonium_pool_int_array_read_access *p_read, pandemonium_pool_int_array_read_access *p_other);
	void (*pandemonium_pool_int_array_read_access_destroy)(pandemonium_pool_int_array_read_access *p_read);
	pandemonium_pool_real_array_read_access *(*pandemonium_pool_real_array_read_access_copy)(const pandemonium_pool_real_array_read_access *p_other);
	const pandemonium_real *(*pandemonium_pool_real_array_read_access_ptr)(const pandemonium_pool_real_array_read_access *p_read);
	void (*pandemonium_pool_real_array_read_access_operator_assign)(pandemonium_pool_real_array_read_access *p_read, pandemonium_pool_real_array_read_access *p_other);
	void (*pandemonium_pool_real_array_read_access_destroy)(pandemonium_pool_real_array_read_access *p_read);
	pandemonium_pool_string_array_read_access *(*pandemonium_pool_string_array_read_access_copy)(const pandemonium_pool_string_array_read_access *p_other);
	const pandemonium_string *(*pandemonium_pool_string_array_read_access_ptr)(const pandemonium_pool_string_array_read_access *p_read);
	void (*pandemonium_pool_string_array_read_access_operator_assign)(pandemonium_pool_string_array_read_access *p_read, pandemonium_pool_string_array_read_access *p_other);
	void (*pandemonium_pool_string_array_read_access_destroy)(pandemonium_pool_string_array_read_access *p_read);
	pandemonium_pool_vector2_array_read_access *(*pandemonium_pool_vector2_array_read_access_copy)(const pandemonium_pool_vector2_array_read_access *p_other);
	const pandemonium_vector2 *(*pandemonium_pool_vector2_array_read_access_ptr)(const pandemonium_pool_vector2_array_read_access *p_read);
	void (*pandemonium_pool_vector2_array_read_access_operator_assign)(pandemonium_pool_vector2_array_read_access *p_read, pandemonium_pool_vector2_array_read_access *p_other);
	void (*pandemonium_pool_vector2_array_read_access_destroy)(pandemonium_pool_vector2_array_read_access *p_read);
	pandemonium_pool_vector2i_array_read_access *(*pandemonium_pool_vector2i_array_read_access_copy)(const pandemonium_pool_vector2i_array_read_access *p_other);
	const pandemonium_vector2i *(*pandemonium_pool_vector2i_array_read_access_ptr)(const pandemonium_pool_vector2i_array_read_access *p_read);
	void (*pandemonium_pool_vector2i_array_read_access_operator_assign)(pandemonium_pool_vector2i_array_read_access *p_read, pandemonium_pool_vector2i_array_read_access *p_other);
	void (*pandemonium_pool_vector2i_array_read_access_destroy)(pandemonium_pool_vector2i_array_read_access *p_read);
	pandemonium_pool_vector3_array_read_access *(*pandemonium_pool_vector3_array_read_access_copy)(const pandemonium_pool_vector3_array_read_access *p_other);
	const pandemonium_vector3 *(*pandemonium_pool_vector3_array_read_access_ptr)(const pandemonium_pool_vector3_array_read_access *p_read);
	void (*pandemonium_pool_vector3_array_read_access_operator_assign)(pandemonium_pool_vector3_array_read_access *p_read, pandemonium_pool_vector3_array_read_access *p_other);
	void (*pandemonium_pool_vector3_array_read_access_destroy)(pandemonium_pool_vector3_array_read_access *p_read);
	pandemonium_pool_vector3i_array_read_access *(*pandemonium_pool_vector3i_array_read_access_copy)(const pandemonium_pool_vector3i_array_read_access *p_other);
	const pandemonium_vector3i *(*pandemonium_pool_vector3i_array_read_access_ptr)(const pandemonium_pool_vector3i_array_read_access *p_read);
	void (*pandemonium_pool_vector3i_array_read_access_operator_assign)(pandemonium_pool_vector3i_array_read_access *p_read, pandemonium_pool_vector3i_array_read_access *p_other);
	void (*pandemonium_pool_vector3i_array_read_access_destroy)(pandemonium_pool_vector3i_array_read_access *p_read);
	pandemonium_pool_vector4_array_read_access *(*pandemonium_pool_vector4_array_read_access_copy)(const pandemonium_pool_vector4_array_read_access *p_other);
	const pandemonium_vector4 *(*pandemonium_pool_vector4_array_read_access_ptr)(const pandemonium_pool_vector4_array_read_access *p_read);
	void (*pandemonium_pool_vector4_array_read_access_operator_assign)(pandemonium_pool_vector4_array_read_access *p_read, pandemonium_pool_vector4_array_read_access *p_other);
	void (*pandemonium_pool_vector4_array_read_access_destroy)(pandemonium_pool_vector4_array_read_access *p_read);
	pandemonium_pool_vector4i_array_read_access *(*pandemonium_pool_vector4i_array_read_access_copy)(const pandemonium_pool_vector4i_array_read_access *p_other);
	const pandemonium_vector4i *(*pandemonium_pool_vector4i_array_read_access_ptr)(const pandemonium_pool_vector4i_array_read_access *p_read);
	void (*pandemonium_pool_vector4i_array_read_access_operator_assign)(pandemonium_pool_vector4i_array_read_access *p_read, pandemonium_pool_vector4i_array_read_access *p_other);
	void (*pandemonium_pool_vector4i_array_read_access_destroy)(pandemonium_pool_vector4i_array_read_access *p_read);
	pandemonium_pool_color_array_read_access *(*pandemonium_pool_color_array_read_access_copy)(const pandemonium_pool_color_array_read_access *p_other);
	const pandemonium_color *(*pandemonium_pool_color_array_read_access_ptr)(const pandemonium_pool_color_array_read_access *p_read);
	void (*pandemonium_pool_color_array_read_access_operator_assign)(pandemonium_pool_color_array_read_access *p_read, pandemonium_pool_color_array_read_access *p_other);
	void (*pandemonium_pool_color_array_read_access_destroy)(pandemonium_pool_color_array_read_access *p_read);
	pandemonium_pool_byte_array_write_access *(*pandemonium_pool_byte_array_write_access_copy)(const pandemonium_pool_byte_array_write_access *p_other);
	uint8_t *(*pandemonium_pool_byte_array_write_access_ptr)(const pandemonium_pool_byte_array_write_access *p_write);
	void (*pandemonium_pool_byte_array_write_access_operator_assign)(pandemonium_pool_byte_array_write_access *p_write, pandemonium_pool_byte_array_write_access *p_other);
	void (*pandemonium_pool_byte_array_write_access_destroy)(pandemonium_pool_byte_array_write_access *p_write);
	pandemonium_pool_int_array_write_access *(*pandemonium_pool_int_array_write_access_copy)(const pandemonium_pool_int_array_write_access *p_other);
	pandemonium_int *(*pandemonium_pool_int_array_write_access_ptr)(const pandemonium_pool_int_array_write_access *p_write);
	void (*pandemonium_pool_int_array_write_access_operator_assign)(pandemonium_pool_int_array_write_access *p_write, pandemonium_pool_int_array_write_access *p_other);
	void (*pandemonium_pool_int_array_write_access_destroy)(pandemonium_pool_int_array_write_access *p_write);
	pandemonium_pool_real_array_write_access *(*pandemonium_pool_real_array_write_access_copy)(const pandemonium_pool_real_array_write_access *p_other);
	pandemonium_real *(*pandemonium_pool_real_array_write_access_ptr)(const pandemonium_pool_real_array_write_access *p_write);
	void (*pandemonium_pool_real_array_write_access_operator_assign)(pandemonium_pool_real_array_write_access *p_write, pandemonium_pool_real_array_write_access *p_other);
	void (*pandemonium_pool_real_array_write_access_destroy)(pandemonium_pool_real_array_write_access *p_write);
	pandemonium_pool_string_array_write_access *(*pandemonium_pool_string_array_write_access_copy)(const pandemonium_pool_string_array_write_access *p_other);
	pandemonium_string *(*pandemonium_pool_string_array_write_access_ptr)(const pandemonium_pool_string_array_write_access *p_write);
	void (*pandemonium_pool_string_array_write_access_operator_assign)(pandemonium_pool_string_array_write_access *p_write, pandemonium_pool_string_array_write_access *p_other);
	void (*pandemonium_pool_string_array_write_access_destroy)(pandemonium_pool_string_array_write_access *p_write);
	pandemonium_pool_vector2_array_write_access *(*pandemonium_pool_vector2_array_write_access_copy)(const pandemonium_pool_vector2_array_write_access *p_other);
	pandemonium_vector2 *(*pandemonium_pool_vector2_array_write_access_ptr)(const pandemonium_pool_vector2_array_write_access *p_write);
	void (*pandemonium_pool_vector2_array_write_access_operator_assign)(pandemonium_pool_vector2_array_write_access *p_write, pandemonium_pool_vector2_array_write_access *p_other);
	void (*pandemonium_pool_vector2_array_write_access_destroy)(pandemonium_pool_vector2_array_write_access *p_write);
	pandemonium_pool_vector2i_array_write_access *(*pandemonium_pool_vector2i_array_write_access_copy)(const pandemonium_pool_vector2i_array_write_access *p_other);
	pandemonium_vector2i *(*pandemonium_pool_vector2i_array_write_access_ptr)(const pandemonium_pool_vector2i_array_write_access *p_write);
	void (*pandemonium_pool_vector2i_array_write_access_operator_assign)(pandemonium_pool_vector2i_array_write_access *p_write, pandemonium_pool_vector2i_array_write_access *p_other);
	void (*pandemonium_pool_vector2i_array_write_access_destroy)(pandemonium_pool_vector2i_array_write_access *p_write);
	pandemonium_pool_vector3_array_write_access *(*pandemonium_pool_vector3_array_write_access_copy)(const pandemonium_pool_vector3_array_write_access *p_other);
	pandemonium_vector3 *(*pandemonium_pool_vector3_array_write_access_ptr)(const pandemonium_pool_vector3_array_write_access *p_write);
	void (*pandemonium_pool_vector3_array_write_access_operator_assign)(pandemonium_pool_vector3_array_write_access *p_write, pandemonium_pool_vector3_array_write_access *p_other);
	void (*pandemonium_pool_vector3_array_write_access_destroy)(pandemonium_pool_vector3_array_write_access *p_write);
	pandemonium_pool_vector3i_array_write_access *(*pandemonium_pool_vector3i_array_write_access_copy)(const pandemonium_pool_vector3i_array_write_access *p_other);
	pandemonium_vector3i *(*pandemonium_pool_vector3i_array_write_access_ptr)(const pandemonium_pool_vector3i_array_write_access *p_write);
	void (*pandemonium_pool_vector3i_array_write_access_operator_assign)(pandemonium_pool_vector3i_array_write_access *p_write, pandemonium_pool_vector3i_array_write_access *p_other);
	void (*pandemonium_pool_vector3i_array_write_access_destroy)(pandemonium_pool_vector3i_array_write_access *p_write);
	pandemonium_pool_vector4_array_write_access *(*pandemonium_pool_vector4_array_write_access_copy)(const pandemonium_pool_vector4_array_write_access *p_other);
	pandemonium_vector4 *(*pandemonium_pool_vector4_array_write_access_ptr)(const pandemonium_pool_vector4_array_write_access *p_write);
	void (*pandemonium_pool_vector4_array_write_access_operator_assign)(pandemonium_pool_vector4_array_write_access *p_write, pandemonium_pool_vector4_array_write_access *p_other);
	void (*pandemonium_pool_vector4_array_write_access_destroy)(pandemonium_pool_vector4_array_write_access *p_write);
	pandemonium_pool_vector4i_array_write_access *(*pandemonium_pool_vector4i_array_write_access_copy)(const pandemonium_pool_vector4i_array_write_access *p_other);
	pandemonium_vector4i *(*pandemonium_pool_vector4i_array_write_access_ptr)(const pandemonium_pool_vector4i_array_write_access *p_write);
	void (*pandemonium_pool_vector4i_array_write_access_operator_assign)(pandemonium_pool_vector4i_array_write_access *p_write, pandemonium_pool_vector4i_array_write_access *p_other);
	void (*pandemonium_pool_vector4i_array_write_access_destroy)(pandemonium_pool_vector4i_array_write_access *p_write);
	pandemonium_pool_color_array_write_access *(*pandemonium_pool_color_array_write_access_copy)(const pandemonium_pool_color_array_write_access *p_other);
	pandemonium_color *(*pandemonium_pool_color_array_write_access_ptr)(const pandemonium_pool_color_array_write_access *p_write);
	void (*pandemonium_pool_color_array_write_access_operator_assign)(pandemonium_pool_color_array_write_access *p_write, pandemonium_pool_color_array_write_access *p_other);
	void (*pandemonium_pool_color_array_write_access_destroy)(pandemonium_pool_color_array_write_access *p_write);
} pandemonium_gdnative_core_api_struct;

#ifdef __cplusplus
}
#endif

#endif // PANDEMONIUM_GDNATIVE_API_STRUCT_H
